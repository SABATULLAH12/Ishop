<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <link href="~/Images/Dinefavicon.ico" rel="shortcut icon" type="image/x-icon">
    @*@Styles.Render("~/Scripts/Slider/jquery-ui-slider-pips.css?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Styles.Render("~/Scripts/Slider/jquery-ui-1.10.1.custom.css?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Styles.Render("~/Content/Layout/Layout.css?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/jquery-1.11.0.min.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/jquery-ui.min.js")
        @Scripts.Render("~/Scripts/index.db.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/Layout/RightPanelFilter.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/StatTesting.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/Layout/Common.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/Layout/LeftPanel.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
        @Scripts.Render("~/Scripts/Layout/Layout.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")*@

    @System.Web.Optimization.Styles.Render("~/bundle/styles/layout")
    @System.Web.Optimization.Scripts.Render("~/bundle/scripts/top-layout")
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-120460845-2"></script>
    <script>      
        var Gtime = 0;
        setInterval(function () {
            if (Gtime < 10) {
                window.dataLayer = window.dataLayer || [];
                function gtag() { dataLayer.push(arguments); }
                gtag('js', new Date());

                gtag('config', 'UA-120460845-2');
                gtag('set', { 'user_id': localStorage["Use_r_Id"] }); // Set the user ID using signed-in user_id.
            }
            Gtime++;
        }, 1000);
    </script>
</head>
<body ng-app="myApp">
    <div id="TopHeader">
        <div id="Logo">
            <ul class="clsHeaderIcon"></ul>
        </div>
        <div id="MenuHeader">
            <ul>
                <li id="Dashboard" class="master_link classDashboard classMouseHover" style="">
                    <div class="dashboard-logo">
                    </div>
                    <div class="module-name">
                        <span class="master_link_a">DASHBOARD</span>
                        <a style="display: none;" class="bottom-line"></a>
                    </div>
                </li>
                <li id="Reports" class="master_link classReport classMouseHover">
                    <div class="reports-logo"></div>
                    <div class="module-name">
                        <span class="master_link_a">REPORTS</span>
                        <a style="display: none;" class="bottom-line"></a>
                    </div>

                </li>
                <li id="Tables" class="master_link classTable classMouseHover">
                    <div class="tables-logo"></div>
                    <div class="module-name">
                        <span class="master_link_a">TABLES</span>
                        <a style="display: none;" class="bottom-line"></a>
                    </div>

                </li>
                <li id="Charts" class="master_link classChart classMouseHover">
                    <div class="charts-logo"></div>
                    <div class="module-name">
                        <span class="master_link_a">CHARTS</span>
                        <a style="display: none;" class="bottom-line"></a>
                    </div>
                </li>
                <li id="Analysis" class="master_link classAnalysis classMouseHover">
                    <div class="analysis-logo">
                    </div>
                    <div class="module-name">
                        <span class="master_link_a">ADD’L CAPABILITIES</span>
                        <a style="display: none;" class="bottom-line"></a>
                    </div>
                </li>
            </ul>
        </div>
        <div id="HeaderIcons">
            <ul>
                <li>
                    <a id="Home" @*title="Home"*@ class="home-logo home-Export classMouseHover dynpos" onclick="GoHome('@System.Configuration.ConfigurationManager.AppSettings["KIMainlink"].ToString()','@System.Configuration.ConfigurationManager.AppSettings["UserForm"]','@System.Configuration.ConfigurationManager.AppSettings["SSOUrl"]','@System.Configuration.ConfigurationManager.AppSettings["SSOLogoutPageUrl"]');"></a>
                </li>
                <li style="display:none;">
                    <div id="Help" @*title="Help"*@ class="settings-logo help-Export classMouseHover dynpos"></div>
                </li>
                <li class="ExportToExcel">
                    <div id="ExportToExcel" @*title="Export to excel"*@ class="exporttoexcel-logo excel-Export classMouseHover dynpos"></div>
                </li>
                <li class="ExportToPDF">
                    <div id="ExportToPDF" @*title="Export to ppt"*@ class="exporttopdf-logo pdf-Export classMouseHover dynpos"></div>
                </li>
                <li class="ExportToPPT">
                    <div id="ExportToPPT" @*title="Export to ppt"*@ class="exporttoppt-logo ppt-Export classMouseHover dynpos"></div>
                </li>
                <li>
                    <div id="Stat-Test" @*title="Stat Setting"*@ class="stat-setting stat-Export classMouseHover dynpos"></div>
                </li>
                <li>
                    <a id="Home" @*title="SignOut"*@ class="home-signout logout-Export classMouseHover dynpos" onclick="SignOut();"></a>
                </li>
            </ul>
        </div>
    </div>
    <div id="SubMenuHeader">
        <div class="SubMenu" parent-menu="Dashboard" style="display: none;">
            <ul>
                <li class="SubItem">
                    <ul id="tbl-menu-retailers" class="Menu" style="padding-left: 20%">
                        <li class="MenuTitle"><span onclick="GoToDashboard('pathtopurchase');" id="dashboard-pathtopurchase">PATH TO PURCHASE</span></li>
                    </ul>
                </li>
                <li class="SubItem">
                    <ul id="tbl-menu-retailers" class="Menu" style="padding-left: 25%">
                        <li class="MenuTitle"><span onclick="GoToDashboard('demographic');" id="dashboard-demo">DEMOGRAPHICS</span></li>
                    </ul>
                </li>
                @*<li class="SubItem">
                        <ul id="tbl-menu-retailers" class="Menu" style="padding-left: 25%">
                            <li class="MenuTitle"><span onclick="GoToDashboard('demographic');" id="dashboard-demo">DEMOGRAPHIC</span></li>
                        </ul>
                    </li>
                    <li class="SubItem">
                        <ul id="tbl-menu-beverage" class="Menu" style="padding-left: 30%">
                            <li class="MenuTitle"><span onclick="GoToDashboard('brandhealth');" id="dashboard-brand">BRAND HEALTH</span></li>
                        </ul>
                    </li>
                    <li class="SubItem">
                        <ul id="tbl-menu-e-commerce" class="Menu" style="padding-left: 15%">
                            <li class="MenuTitle"><span onclick="GoToDashboard('visits');" id="dashboard-visit">VISITS</span></li>
                        </ul>
                    </li>*@
            </ul>
        </div>

        <div class="SubMenu" parent-menu="Tables" style="display: none;">
            <ul>
                <li class="SubItem">
                    <ul id="tbl-menu-retailers" class="Menu Retailers-Table classMouseHover" style="padding-left: 25%">
                        <li class="MenuTitle"><span id="tbl-retailers">RETAILER</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div id="tbl-retailers-arrow" class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-tbl-compareretailers" class="SubMenuli CompareRetailer-Table classMouseHover">
                                @Html.ActionLink("COMPARE RETAILERS", "CompareRetailers", "Tables")
                            </li>
                            <li link-name="hdn-tbl-retailerdeepdive" class="SubMenuli RetailerDeepDive-Table classMouseHover">
                                @Html.ActionLink("RETAILER DEEP DIVE", "RetailerDeepDive", "Tables")
                            </li>
                        </ul>
                    </div>
                </li>
                <li class="SubItem">
                    <ul id="tbl-menu-beverage" class="Menu Beverage-Table classMouseHover" style="padding-left: 30%">
                        <li class="MenuTitle"><span id="tbl-beverage">BEVERAGE</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div id="tbl-beverage-arrow" class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-tbl-comparebeverages" class="SubMenuli CompareBeverage-Table classMouseHover">
                                @Html.ActionLink("COMPARE BEVERAGES", "CompareBeverages", "Tables")
                            </li>
                            <li link-name="hdn-tbl-beveragedeepdive" class="SubMenuli BeverageDeepDive-Table classMouseHover">
                                @Html.ActionLink("BEVERAGE DEEP DIVE", "BeverageDeepDive", "Tables")
                            </li>
                        </ul>
                    </div>
                </li>
                <li class="SubItem" style="">
                    <ul id="tbl-menu-e-commerce" class="Menu ecom-Table classMouseHover" style="padding-left: 15%">
                        <li class="MenuTitle"><span id="e-commerce-tbl-sites">E-COMMERCE SITES</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div id="e-commerce-tbl-sites-arrow" class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-e-commerce-tbl-comparesites" class="SubMenuli Compareecom-Table classMouseHover">
                                @Html.ActionLink("COMPARE SITES", "CompareSites", "E_Commerce_Table")
                            </li>
                            <li link-name="hdn-e-commerce-tbl-sitedeepdive" class="SubMenuli ecomdeepdive-Table classMouseHover">
                                @Html.ActionLink("SITE DEEP DIVE", "SiteDeepDive", "E_Commerce_Table")
                            </li>
                        </ul>
                    </div>
                </li>
            </ul>
        </div>
        <div class="SubMenu" parent-menu="Charts" style="display: none;">
            <ul>
                <li class="SubItem">
                    <ul id="chart-menu-retailers" class="Menu Retailers-Chart classMouseHover" style="padding-left: 25%">
                        <li class="MenuTitle"><span id="chart-retailers">RETAILER</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div id="chart-retailers-arrow" class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-chart-compareretailers" class="SubMenuli CompareRetailer-Chart classMouseHover">
                                @Html.ActionLink("COMPARE RETAILERS", "CompareRetailers", "Charts")
                            </li>
                            <li link-name="hdn-chart-retailerdeepdive" class="SubMenuli RetailerDeepDive-Chart classMouseHover">
                                @Html.ActionLink("RETAILER DEEP DIVE", "RetailerDeepDive", "Charts")
                            </li>
                        </ul>
                    </div>
                </li>
                <li class="SubItem">
                    <ul id="chart-menu-beverage" class="Menu Beverage-Chart classMouseHover" style="padding-left: 30%">
                        <li class="MenuTitle"><span id="chart-beverage">BEVERAGE</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div id="chart-beverage-arrow" class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-chart-comparebeverages" class="SubMenuli CompareBeverage-Chart classMouseHover">
                                @Html.ActionLink("COMPARE BEVERAGES", "CompareBeverages", "Charts")
                            </li>
                            <li link-name="hdn-chart-beveragedeepdive" class="SubMenuli BeverageDeepDive-Chart classMouseHover">
                                @Html.ActionLink("BEVERAGE DEEP DIVE", "BeverageDeepDive", "Charts")
                            </li>
                        </ul>
                    </div>
                </li>
                @*<li class="SubItem">
                    <ul class="Menu ecom-Chart classMouseHover" style="padding-left: 15%">
                        <li class="MenuTitle"><span id="e-commerce-chart-sites">E-COMMERCE SITES</span></li>
                        <li class="MenuTitle" style="float: right">
                            <div class="downarrw"></div>
                        </li>
                    </ul>
                    <div class="Item" style="display: none;">
                        <ul>
                            <li link-name="hdn-e-commerce-chart-comparesites" class="SubMenuli CompareSites-Chart classMouseHover">
                                @Html.ActionLink("COMPARE SITES", "CompareSites", "E_Commerce_Chart")
                            </li>
                            <li link-name="hdn-e-commerce-chart-sitedeepdive" class="SubMenuli sitesDeepDive-Chart classMouseHover">
                                @Html.ActionLink("SITE DEEP DIVE", "SiteDeepDive", "E_Commerce_Chart")
                            </li>
                        </ul>
                    </div>
                </li>*@
            </ul>
        </div>
        <div class="SubMenu popup-menu reports-menu" parent-menu="Reports" style="display: none;">
            <div class="report-menus">
                <div class="report-submenu">
                    <ul>
                        <li class="view-title RetailerOverview-Reports classMouseHover">
                            Retailer Overview Reports
                        </li>
                        <li id="reports-compare-retailers-shoppers" class="view-name CompareRetailers-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Compare Retailers’ Shoppers", "CompareRetailersShoppers", "Reports")
                        </li>
                        <li id="reports-retailers-shopper-deepdive" class="view-name ShopperDeepDive-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink(" Retailer’s Shopper Deep Dive", "RetailersShopperDeepDive", "Reports")
                        </li>
                        <li id="reports-compare-retailers-pathtopurchase" class="view-name RetailersPathToPurchase-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Compare Retailers’ Path To Purchase", "CompareRetailersPathToPurchase", "Reports")
                        </li>
                        <li id="reports-retailers-pathtopurchase-deepdive" class="view-name RetailerPurchaseDeepDive-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Retailer’s Path To Purchase Deep Dive", "RetailersPathToPurchaseDeepDive", "Reports")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu">
                    <ul>
                        <li class="view-title BeverageOverview-Reports classMouseHover" style="">
                            Beverage Overview Reports
                        </li>
                        <li id="reports-compare-beverages-monthly-pluspurchasers" class="view-name BeveragesMonthlyPlusPurchasers-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Compare Beverages’ Monthly+ Purchasers", "CompareBeveragesMonthlyPlusPurchasers", "Reports")
                        </li>
                        <li id="reports-beverage-monthly-pluspurchasers-deepdive" class="view-name BeveragesMonthlyPlusPurchasersDeepDive-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Beverage Monthly+ Purchaser’s Deep Dive", "BeverageMonthlyPlusPurchasersDeepDive", "Reports")
                        </li>
                        <li id="reports-compare-beverages-purchase-details" class="view-name BeveragesPurchaseDetails-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Compare Beverages’ Purchase Details", "CompareBeveragesPurchaseDetails", "Reports")
                        </li>
                        <li id="reports-beverages-purchase-details-deepdive" class="view-name BeveragesPurchaseDetailsDeepDive-RetailerOverview-Reports classMouseHover">
                            @Html.ActionLink("Beverage’s Purchase Details Deep Dive", "BeveragesPurchaseDetailsDeepDive", "Reports")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu">
                    <ul>
                        <li class="view-title TotalOverview-Reports classMouseHover" style="">
                            Total Respondents/Trips Reports
                        </li>
                        <li id="reports-crossRetailer-TotalRespondentsTrips" class="view-name">
                            @Html.ActionLink("Total Respondents/Trips Reports", "TotalRespondentsReports", "Reports")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu" style="margin-right:0px">
                    <ul>
                        <li class="view-title SarReport classMouseHover" style="">
                            Custom Reports
                        </li>
                        <li id="reports-crossRetailer-SarReport" class="view-name">
                            @Html.ActionLink("Briefing Book – Situation Assessment", "SARReports", "Reports")
                        </li>
                    </ul>
                </div>
            </div>
            <div class="submodule-border-bottom"></div>
        </div>

        <div class="SubMenu popup-menu reports-menu" parent-menu="Analysis" style="display: none;">
            <div class="report-menus">
                <div class="report-submenu">
                    <ul>
                        <li class="view-title CBP-Others classMouseHover">
                            CBP Frameworks
                        </li>
                        <li id="others-bgm" class="view-name bgm-Others classMouseHover">
                            @*@Html.ActionLink("BGM (Business Growth Model)", "AcrossShopper", "Analysis")*@
                            @Html.ActionLink("Shopper Metrics", "AcrossShopper", "Analysis")
                        </li>
                        <li id="others-soap" class="view-name soap-Others classMouseHover">
                            @Html.ActionLink("SOAP (Shopper On A Page)", "AcrossTrips", "Analysis")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu">
                    <ul>
                        <li class="view-title Correnspondence-Others classMouseHover" style="">
                            Correspondence Maps
                        </li>
                        <li id="others-compare-retailers" class="view-name Compareretailer-Others classMouseHover">
                            @Html.ActionLink("Compare Retailers", "WithinShopper", "Analysis")
                        </li>
                        <li id="others-retailer-deep-dive" class="view-name retailerdeepdive-Others classMouseHover">
                            @Html.ActionLink("Retailer Deep Dive", "WithinTrips", "Analysis")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu">
                    <ul>
                        <li class="view-title RetailerCross-Others classMouseHover" style="">
                            Retailer Cross Shopping Analysis
                        </li>
                        <li id="others-cross-retailer-frequencies" class="view-name frequencies-Others classMouseHover">
                            @Html.ActionLink("Cross Retailer Frequencies", "CrossRetailerFrequencies", "Analysis")
                        </li>
                        <li id="others-cross-retailer-imageries" class="view-name imageries-Others classMouseHover">
                            @Html.ActionLink("Cross Retailer Imageries", "CrossRetailerImageries", "Analysis")
                        </li>
                    </ul>
                </div>
                <div class="report-submenu">
                    <ul>
                        <li class="view-title Annualised-Others classMouseHover" style="">
                            Annualized Projections
                        </li>
                        <li id="others-establishment-deepdeive" class="view-name EstablishmentDeepDive-Others classMouseHover">
                            @Html.ActionLink("Trip decomposition", "EstablishmentDeepDive", "Analysis")
                        </li>
                    </ul>
                </div>  
            </div>
            <div class="submodule-border-bottom"></div>
        </div>
    </div>
    <div id="LeftPanel" style="display: none;">

        @*Trips/Shopper Toggle*@
        <div id="dashboard-pathtopurchase-trips-shopper" class="FilterMenu PitTrendToggleDashTrip classMouseHover" style="display: none; height: 80px;">
            <div class="lft-ctrl-toggle">
                @*<div class="lft-popup-tp-smnu lft-popup-tp-smnu-active" data-val="pit"></div>
                    <div class="lft-popup-tp-smnu" data-val="trend"></div>*@
                <div id="lft-fltr-pitDashTrip" name="pathtopurchase-size-Trip" class="lft-ctrl-toggle-text pit Active">Trips</div>
                <label class="pathtopurchase-size-skew-switchTrip">
                    <input type="checkbox" id="pathtopurchase-size-skew-toggleTrip" data-val="pit">
                    <div class="pit-trend-slider round"></div>
                </label>
                <div id="lft-fltr-trendDashShopper" name="trend" class="lft-ctrl-toggle-text trend">Shopper</div>
            </div>
        </div>
        @*End*@

        @*Pit/Trend Toggle*@
        <div id="dashboard-pathtopurchase-size-skew" class="FilterMenu PitTrendToggleDash classMouseHover" style="display: none; height: 80px;">
            <div class="lft-ctrl-toggle">
                @*<div class="lft-popup-tp-smnu lft-popup-tp-smnu-active" data-val="pit"></div>
                    <div class="lft-popup-tp-smnu" data-val="trend"></div>*@
                <div id="lft-fltr-pitDash" name="pathtopurchase-size-skew" class="lft-ctrl-toggle-text pit Active">Size</div>
                <label class="pathtopurchase-size-skew-switch">
                    <input type="checkbox" id="pathtopurchase-size-skew-toggle" data-val="pit">
                    <div class="pit-trend-slider round"></div>
                </label>
                <div id="lft-fltr-trendDash" name="trend" class="lft-ctrl-toggle-text trend">Skew</div>
            </div>
        </div>
        @*End*@


        @*Pit/Trend Toggle*@
        <div id="PIT-TREND" class="FilterMenu PitTrendToggle classMouseHover" style="display: none; height: 80px;">
            <div class="lft-ctrl-toggle">
                @*<div class="lft-popup-tp-smnu lft-popup-tp-smnu-active" data-val="pit"></div>
                    <div class="lft-popup-tp-smnu" data-val="trend"></div>*@
                <div id="lft-fltr-pit" name="pit" class="lft-ctrl-toggle-text pit Active">POINT IN TIME</div>
                <label class="pit-trend-switch">
                    <input type="checkbox" id="pit-toggle" data-val="pit">
                    <div class="pit-trend-slider round"></div>
                </label>
                <div id="lft-fltr-trend" name="trend" class="lft-ctrl-toggle-text trend">TREND</div>
            </div>
        </div>
        @*End*@
        @*Time Period*@
        <div id="TimePeriod" class="FilterMenu TimePeriod classMouseHover">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="timeperiod_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Retailers*@
        <div id="Retailers" class="FilterMenu Retailers classMouseHover" filter-name="Retailers" search-params="Retailer|Search-Retailers|Retailer-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="retailer_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@

        @*Beverages*@
        <div id="Beverages" class="FilterMenu Beverages classMouseHover" filter-name="Beverages" search-params="Beverage|Search-Beverages|Beverage-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="establishment_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@

        @*SAR Retailers*@
        <div id="Sar-Retailers" class="FilterMenu Sar-Retailers classMouseHover" filter-name="Retailers" search-params="Sar-Retailer|Search-Sar-Retailers|Sar-Retailer-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="retailer_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@

        @*SAR Competitors*@
        <div id="Competitors" class="FilterMenu Sar-Competitors classMouseHover" filter-name="Competitors" search-params="Competitor|Search-Competitors|Competitor-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="competitor_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*SAR Frequency*@
        <div id="Sar-Frequency" class="FilterMenu Sar-Frequency classMouseHover" filter-name="SarFrequency" search-params="Sar-Frequency|Search-Sar-Frequency|Sar-Frequency-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="Freq_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Geography Filters*@
        <div id="GeographyFilters" class="FilterMenu Geography-SOAP classMouseHover" update-geography="true" filter-name="Default Geography" search-params="Geography|Search-GeographyFilters|GeographyFilter-Search-Content" style="display: none;" @*onclick="DisplaySecondaryGeoFilter($('#PrimaryGeographyFilterList ul li div'));"*@>
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="Geo_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Group Type*@
        <div id="GroupType" class="FilterMenu Group classMouseHover" update-geography="true" filter-name="Shopper Groups" search-params="Type|Search-Group-Type|Group-Type-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="grouptype_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Measure Type*@
        <div id="MeasureType" class="FilterMenu Measure-Charts classMouseHover" filter-name="Retailer Measure" search-params="Measure|Search-Measure-Type|Measure-Type-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="measure_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*TotalMeasure Type*@
        <div id="TotalMeasure" class="FilterMenu Measure-TotalRespondants classMouseHover" filter-name="Total Measure" search-params="TotalMeasure|Search-TotalMeasure-Type|TotalMeasure-Type-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="measure_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@

        @*Time Frequency*@
        <div id="Left-Frequency" class="FilterMenu LeftFrequncy-Others classMouseHover" filter-name="BGM Frequency" search-params="Left-Panel-Frequency|Search-Left-Panel-FrequencyFilters|FreqFilter-Left-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="Freq_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Channel Visited*@
        <div id="Left-Channel-Visited" class="FilterMenu WherePurchased-Reports classMouseHover" filter-name="Beverage Where Purchased" search-params="Channel|Search-Wherepurchased|WherePurchased-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="measure_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Advanced Analytics Select Variable Visited*@
        <div id="Advanced-Analytics-Select-Variable" class="FilterMenu CorrespondanceMeasureVariable-Others classMouseHover" filter-name="CorrespondenceMeasure" search-params="AdvancedAnalytics|Search-Left-Advanced-AnalyticsFilters|Advanced-AnalyticsFilter-Left-Search-Content" style="display: none;">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="measure_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*Advanced Filters*@
        <div id="AdvancedFilters" class="FilterMenu Demographics classMouseHover" update-geography="true" filter-name="Demographic" search-params="DemographicFilters|Search-AdvancedFilters|AdvancedFilter-Search-Content">
            <div class="FilterBlock InactiveSelection">
                <ul class="FilterBlockList">
                    <li class="FilteriCon">
                        <div class="demograhicFitr_img">
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        @*End*@
        @*save button for P2P dashboard*@
        <div class="master-lft-ctrl dashboard-save submt SaveHide SaveHide-msehover classMouseHover" style="display:none;">
            <div class="master-btn lft-ctrl2 SaveImg" id="master-btn" onclick="SaveDashboardSelection()"></div>
        </div>
        @*Sar download Button*@
        <div id="downloadButton" class="master-lft-ctrl submt-sar" style="display:none;">
            <div class="master-btn-sar lft-ctrl2" id="master-btn-sar" onclick="callSampleSizeForSar(event)">@*<span>Submit</span>*@</div>
        </div>
        @*End*@
        @*Submit Button*@
        <div id="submitButton" class="master-lft-ctrl submt">
            <div class="master-btn lft-ctrl2" id="master-btn" onclick="prepareContentArea();">@*<span>Submit</span>*@</div>
        </div>
        @*End*@
    </div>
    <div id="RightPanel">
        <div id="filter-content">
            <div id="FilterHeader" style="display: none;">
                <div id="Page-Lavel"></div>
                <div id="SelectedFilters">
                    <div id="textLength" style="display: none"></div>
                    <div id="scrollableselection"></div>
                    <div class="arrow_popup">
                        <div class="arrw breadcrumb-open arrw_dwn classMouseHover dynpos1"></div>
                    </div>
                </div>
            </div>
        </div>
        @RenderBody()
        @*Stat test*@
        <div class="LowerRightContent" style="background-color: #CACACA; height: auto; position: absolute; margin: 0; bottom: 1px; width: 96%; font-size: 11px; display: none;">
            <div id="stat-test-content">
                <div id="div_stattest">
                    <ul>
                        <li>
                            <div id="samplesize" style="">
                                <ul style="margin: 0; padding: 0">
                                    <li id="hideStatTestVsText" class="classMouseHover StattestingText dynpos1 up">
                                        <div style="font-weight: bold; padding: 2px 0px;">
                                            <span>STAT TESTING VS:</span>
                                        </div>
                                    </li>
                                    <li id="stattest_totaltime" class="stattestselection Stat-totaltime classMouseHover dynpos1 up">
                                        <div class="stattest">
                                            <span sigtype-id="2">TOTAL TIME</span>
                                        </div>
                                    </li>
                                    <li id="stattest_previousyear" class="stattestselection Stat-prevyear classMouseHover dynpos1 up">
                                        <div class="stattest">
                                            <span sigtype-id="4">PREVIOUS YEAR</span>
                                        </div>
                                    </li>
                                    <li id="stattest_previousperiod" class="stattestselection Stat-prevperiod classMouseHover dynpos1 up">
                                        <div class="stattest">
                                            <span sigtype-id="3">PREVIOUS PERIOD</span>
                                        </div>
                                    </li>

                                    <li id="stattest_base" class="stattestselection Stat-base classMouseHover dynpos1 up">
                                        <div class="stattest">
                                            <span sigtype-id="5">BASE</span>
                                        </div>
                                    </li>
                                    <li id="stattest_benchmark" class="stattestselection Stat-custombase classMouseHover dynpos1 up" filter-name="" search-params="">
                                        <div class="stattest">
                                            <span sigtype-id="1">CUSTOM BASE</span>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </li>
                        <li id="NoteSample" style="display:none;">
                            <div style="float: left;">
                                <span style="font-weight: bold;">Note:</span> Grey font = Low Sample (30-99), Blank = Sample < 30; NA = Not Applicable <span id="chartNote" style="float: right; display: none">IF BENCHMARK SAMPLE SIZE < 30, CHART IS NOT SHOWN.</span>
                            </div>
                        </li>
                        <li id="P2P-popup-note" style="display:none;">
                            <div style="float:left;" class="table-stat-empty">
                                <span class="samplesize-note"></span> <span class="samplesize-text">
                                    Customize - click for additional
                                    data points to be included
                                </span>
                            </div>
                        </li>
                        <li id="P2PSampleSize" style="display:none;">
                            <div style="float: left;">
                                <span class="P2PSampleSize">Sample Size: 0</span>
                            </div>
                        </li>
                        <li>
                            <div class="stattest-sign">
                                <ul>
                                    <li class="stattestpercentage">
                                        @*<div class="table-stat-sigfncegrenimg"></div>*@
                                        <div class="outer_Signi">
                                            <div class="inner_Signi_Green">
                                            </div>
                                        </div>
                                    </li>
                                    <li class="stattestpercentage">
                                        <div id="Green_Value">
                                            Significantly Higher
                                        </div>
                                    </li>
                                    <li class="stattestpercentage">
                                        @*<div class="table-stat-sigfnceredimg"></div>*@
                                        <div class="outer_Signi">
                                            <div class="inner_Signi_Red">
                                            </div>
                                        </div>
                                    </li>
                                    <li class="stattestpercentage">
                                        <div id="Red_Value">Significantly Lower</div>
                                    </li>
                                </ul>
                            </div>
                        </li>
                        <li>
                            <div id="bgmnote" style="font-size: 10px; display: none;">
                                <span>
                                    *MONTHLY+ PURCHASER IS ONLY AVAILABLE FOR THE FOLLOWING CATEGORIES: CSD, RTD COFFEE, RTD TEA,
                                    PROTEIN DRINKS, RTD SMOOTHIES, JUICE/JUICE DRINKS, PACKAGED WATER, SPOTS DRINKS, ENERGY SHOTS/DRINKS
                                    AND LIQUID FLAVOR ENHANCERS.
                                </span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="ShowStatDetails" style="display: none;">
            <ul>
                <li>

                    @*<div class="table-stat-sigfncegrenimg"></div>*@
                    <div class="outer_Signi" style="margin: 0;">
                        <div class="inner_Signi_Green" style="margin: 0; display: block;">
                        </div>
                    </div>
                </li>
                <li>
                    <div>
                        Significantly Positive with <span id="GreenValue"></span>confidence interval
                    </div>

                </li>
            </ul>
            <ul>
                <li>
                    @*<div class="table-stat-sigfnceredimg"></div>*@
                    <div class="outer_Signi" style="margin: 0;">
                        <div class="inner_Signi_Red" style="margin: 0; display: block;">
                        </div>
                    </div>
                </li>
                <li>
                    <div>
                        Significantly Negative with <span id="RedValue"></span>confidence interval
                    </div>

                </li>
            </ul>
        </div>
        @*End*@
    </div>
    <div id="PopupBlock">
        @*TimePeriod*@
        <div class="FilterPopup TimePeriod" style="display: none; height: 250px; width: 405px; padding-top: 4px;">
            <div class="Title lft-popup-col-selected-text" style="width: auto; margin-top: 0; border-bottom: 1px dashed #eaeaea; color: white;">Time Period</div>
            <div class="selectionText TimePeriodSelectionText" style="width: 100%; height: 8px; margin-bottom: 2px;">You can select from 2 to 25 Time Period</div>
            <div id="TimeBlock">
                <ul>
                    <li name="TOTAL TIME" onclick="SelectTimePeriod(this);">Total Time</li>
                    <li name="YEAR" onclick="SelectTimePeriod(this);">Year</li>
                    <li name="YTD" onclick="SelectTimePeriod(this);">YTD</li>

                </ul>
                <ul>
                    <li name="QUARTER" onclick="SelectTimePeriod(this);">Quarter</li>
                    <li name="12MMT" onclick="SelectTimePeriod(this);">12 MMT</li>
                    <li name="3MMT" onclick="SelectTimePeriod(this);">3MMT</li>
                </ul>
            </div>
            <div id="SliderContent">
                <div class="slider"></div>
            </div>
        </div>
        @*End TimePeriod*@

        @*Retailers*@
        @*<div class="FilterPopup Retailers" style="display: none; height: 432px; width: auto;">*@

        <div class="Custombase-Retailers" style="display: none; width: auto;z-index:100000;">
            <div class="custom-popup-header"><div class="custom-top-text"><span>CUSTOM BASE</span><br><div class="small">(SELECTED RETAILER WILL BE STAT TESTED AGAINST YOUR SELECTION)</div></div><div class="custom-top-btm-brdr"></div></div>
            <div id="Custombase-Retailer-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Custombase-Retailers" class="txt-search" name="Custombase-Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText RetailerSelectiontext">You can select from 2 to 11 Retailers</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="Custombase-RetailerDivId" class="Custombase-RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
            <div class="custom-bottom-border"></div>
            <div class="custom-cancel-submit">
                <div id="custom-base-on-submit" class="custom-submit" onclick="custom_submit()">
                    <div class="custom-submit-inner"><div class="vertical-align">Submit</div></div>
                </div>
                <div id="custom-base-cancel" class="custom-cancel" onclick="custom_cancel()">
                    <div class="vertical-align">Cancel</div>
                </div>
                <div id="custom-base-customise" style="display:none;" class="custom-cancel">
                    <div class="vertical-align">Customize</div>
                </div>
                <div id="custom-base-customise-ok" style="display:none;margin-right: 10px;" class="custom-submit">
                    <div class="custom-submit-inner"><div class="vertical-align">OK</div></div>
                </div>
            </div>
        </div>
        @*End Retailers*@

        @*Retailers*@
        @*<div class="FilterPopup Retailers" style="display: none; height: 432px; width: auto;">*@

        <div class="FilterPopup Retailers" style="display: none; width: auto;">
            <div id="Retailer-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Retailers" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText RetailerSelectiontext">You can select from 2 to 11 Retailers</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="RetailerDivId" class="RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
        </div>
        @*End Retailers*@

        @*Beverages*@
        @*<div class="FilterPopup Retailers" style="display: none; height: 432px; width: auto;">*@

        <div class="FilterPopup Beverages" style="display: none; width: auto; overflow-y: hidden;">
            <div id="BevContainerDivId" class="BevContainerDiv" style="width: auto; overflow-y: hidden; top: 0%; height: 100%;padding-right:1px;box-sizing:border-box;">
                <div id="BevScrollDivId" class="BevScrollDiv">
                    <div id="Beverage-Search-Content" class="Search-Filter">
                        <div class="Search">
                            <input type="text" id="Search-Beverages" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                            <div class="img-search">
                            </div>
                        </div>
                    </div>
                    <div class="selectionText BeverageSelectionText">You can select from 2 to 11 Beverages</div>
                    <div class="AdvancedFiltersDemoHeading HeaderLevel">
                        <div id="beverageHeadingLevel0" class="lft-popup-col-selected-text Headerlevel0" style="width: 287px; float: left;">Purchase Items</div>
                        <div id="beverageHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Beverages</div>
                        <div id="beverageHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Beverage</div>
                        <div id="beverageHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Beverage</div>
                    </div>
                    <div id="BevDivId" class="BevDiv">
                        <div id="BGMBeverage_NonBevarageDiv" class="Lavel" style="display: none; height: 95%;">
                            <ul>
                                <li>
                                    <div id="1" name="BEVERAGE ITEMS" onclick="Displaybevnonbevdivs(this);" style="position: relative; display: flex;">
                                        <span style="width: 92%;" class="Comparison">Beverage Items</span>
                                        <div class="ArrowContainerdiv" style="background-color: rgb(88, 85, 77);">
                                            <span class="sidearrw"></span>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div id="2" name="NON-BEVERAGE ITEMS" onclick="Displaybevnonbevdivs(this);" style="position: relative; display: flex;">
                                        <span style="width: 92%;" class="Comparison">Non-Beverage Items</span>
                                        <div class="ArrowContainerdiv" style="background-color: rgb(88, 85, 77);">
                                            <span class="sidearrw"></span>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <div id="BGMNonBeverageDiv" class="Lavel" style="display: none; height: 95%;"></div>
                        @*  <div id="BeverageOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
                    </div>
                </div>
            </div>
        </div>
        @*End Beverages*@

        @*SarRetailers*@

        <div class="FilterPopup Sar-Retailers" style="display: none; width: auto;">
            <div id="Sar-Retailer-Search-Content" class="Search-Filter">
                <div class="Search SarHiddenSearch">

                </div>
                <div class="Search SarSearch" style="display:none;">
                    <input type="text" id="Search-Sar-Retailers" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText SarHiddenSelectionText" style="visibility:hidden;">You can select from 2 to 11 Retailers</div>
            <div class="selectionText RetailerSelectiontext SarSelectionText" style="display:none;">You can select from 2 to 11 Retailers</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div class="sar-first-lft-popup-col-text lft-popup-col-selected-text" style="width: 287px; visibility:hidden;">Retailers</div>
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;  display: none;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="SarRetailerDivId" class="RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
        </div>
        @*End Retailers*@

        @*SarCompetitors*@

        <div class="FilterPopup Competitors" style="display: none; width: auto;">
            <div id="Competitor-Search-Content" class="Search-Filter">
                <div class="Search SarHiddenSearch">

                </div>
                <div class="Search SarSearch" style="display:none;">
                    <input type="text" id="Search-Competitors" class="txt-search" name="Channel-Competitors-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText SarHiddenSelectionText">You can select from 2 to 11 Retailers</div>
            <div class="selectionText RetailerSelectiontext SarSelectionText" style="display:none;">You can select from 2 to 11 Retailers</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div class="sar-first-lft-popup-col-text lft-popup-col-selected-text" style="width: 287px; visibility:hidden;">Retailers</div>
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;  display: none;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="SarCompetitorDivId" class="RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
        </div>
        @*End SarCompetitors*@

        @*SarFrequency*@

        <div class="FilterPopup Sar-Frequency" style="display: none; width: auto;">
            <div id="Sar-Frequency-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Sar-Frequency" class="txt-search" name="Channel-Frequency-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText RetailerSelectiontext"></div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;  display: none;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="SarFrequencyDivId" class="RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
        </div>
        @*End SarFrequency*@

        @*AdvancedFilters*@
        <div class="FilterPopup GeographyFilters" style="display: none; height: 79%; width: auto;">
            <div id="GeographyFilter-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-GeographyFilters" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="GeographyHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Geography Filters</div>
                <div id="GeographyHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Geography Filters</div>
                <div id="GeographyHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Geography Filters</div>
            </div>
            @*<div id="PrimaryGeographyFilterContent" class="DemoLevel Lavel Lavel1" style="overflow-y: auto;">
                    <div id="PrimaryGeographyFilterList" class="clsPrimaryDemoFilterList" style="height: auto; overflow: hidden;"></div>
                </div>
                <div id="SecondaryGeographyFilterContent" class="DemoLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none; height: 88%;">
                    <div id="SecondaryGeographyFilterList" class="clsSecondaryDemoFilterList"></div>
                </div>
                <div id="ThirdLevelGeographyFilterContent" class="DemoLevel DemoLevel3 Lavel2 Sub-Lavel" style="display: none; height: 88%;">
                    <div id="ThirdGeographyFilterList" class="clsThirdDemoFilterList"></div>
                </div>
                <div id="FourthLevelGeographyFilterContent" class="DemoLevel DemoLevel3 Lavel2 Sub-Lavel" style="display: none; height: 88%;">
                    <div id="FourthGeographyFilterList" class="clsFourthDemoFilterList"></div>
                </div>*@
            <div id="soap-geography-data"></div>
        </div>
        @*End AdvancedFilters*@
        @*Group Type*@

        <div class="FilterPopup GroupType" style="display: none; width: auto;">
            @*<div class="GroupContentScroll" style="width: auto; height: 100%; overflow-x: auto;">*@
            <div class="GroupContentDiv">
                <div id="Group-Type-Search-Content" class="Search-Filter">
                    <div class="Search">
                        <input type="text" id="Search-Group-Type" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                        <div class="img-search">
                        </div>
                    </div>
                </div>
                <div class="selectionText GroupSelectionText">You can select from 2 to 11 Groups</div>
                <div class="AdvancedFiltersDemoHeading HeaderLevel">
                    <div id="grouptypeHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Metric Comparison</div>
                    <div id="grouptypeHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel4" class="lft-popup-col-selected-text Headerlevel4" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel5" class="lft-popup-col-selected-text Headerlevel5" style="width: 287px; float: left; display: none;">Groups</div>
                </div>


                <div id="groupDivId" class="groupDiv">
                    <div id="PrimeGroupTypeHeaderContent" class="Lavel" style="height: 95%;"></div>
                    @*  <div id="GroupTypeHeaderContent" class="Lavel" style="height: 95%; display: none;"></div>
                        <div id="GroupTypeContent" class="Lavel Sub-Lavel"></div>
                        <div id="GroupTypeContentSub" class="Lavel Sub-Lavel"></div>*@
                    <div id="GroupTypeGeoContentSub" class="Lavel Sub-Lavel" style="display: none;"></div>
                </div>
            </div>
            @*</div>*@
        </div>
        @*End Group Type*@

        @*Custombase Group Filters*@
        <div class="FilterPopup Custombase-GroupType" style="display: none; width: auto;">
            <div class="custom-popup-header"><div class="custom-top-text"><span>CUSTOM BASE</span><br><div class="small">(SELECTED FILTER WILL BE ADDED TO YOUR CUSTOM BENCHMARK SELECTION)</div></div><div class="custom-top-btm-brdr"></div></div>
            <div style="clear:both;height:93%;" class="GroupContentDiv">
                <div id="Group-Type-Custom-Base-Search-Content" class="Search-Filter">
                    <div class="Search">
                        <input type="text" id="Search-Custom-Base-Group-Type" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                        <div class="img-search">
                        </div>
                    </div>
                </div>
                <div class="selectionText GroupSelectionText">You can select from 2 to 11 Groups</div>
                <div class="AdvancedFiltersDemoHeading HeaderLevel">
                    <div id="grouptypeHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">ADVANCE FILTERS</div>
                    <div id="grouptypeHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel4" class="lft-popup-col-selected-text Headerlevel4" style="width: 287px; float: left; display: none;">Groups</div>
                    <div id="grouptypeHeadingLevel5" class="lft-popup-col-selected-text Headerlevel5" style="width: 287px; float: left; display: none;">Groups</div>
                </div>


                <div id="custombase-groupDivId" class="custombase-groupDivId groupDiv" style="height:77%;">
                    <div id="PrimeGroupTypeHeaderContent" class="Lavel" style="height: 95%;"></div>
                    <div id="GroupTypeGeoContentSub" class="Lavel Sub-Lavel" style="display: none;"></div>
                </div>
            </div>
            @*</div>*@
            <div class="custom-bottom-border"></div>
            <div class="custom-cancel-submit">               
                <div id="custom-addfilter-cancel" class="custom-cancel">
                    <div class="vertical-align">Cancel</div>
                </div>           
                <div id="custom-base-ok" class="custom-submit" style="margin-right: 10px;">
                    <div class="custom-submit-inner"><div class="vertical-align">OK</div></div>
                </div>    
            </div>
        </div>
        @*End Custombase Group Filters*@

        @*Measure Type*@
        <div class="FilterPopup MeasureType" style="display: none; width: auto; overflow-y: hidden; overflow-x: hidden;">
            <div id="MeasureContainerDivId" class="MeasureContainerDiv" style="width: auto; height: 100%;">
                <div id="MeasureScrollDivId" class="MeasureScrollDiv">
                    <div id="Measure-Type-Search-Content" class="Search-Filter">
                        <div class="Search">
                            <input type="text" id="Search-Measure-Type" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                            <div class="img-search">
                            </div>
                        </div>
                    </div>
                    <div class="selectionText MeasureSelectionText">You can select Either 1 or up to 11 Measures</div>
                    <div class="AdvancedFiltersDemoHeading HeaderLevel">
                        <div id="MeasuresHeadingLevel" class="lft-popup-col-selected-text Headerlevel0" style="width: 287px; float: left;">Measures</div>
                        <div id="MeasuresHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left; display: none;">Measures</div>
                        <div id="MeasuresHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Measures</div>
                        <div id="MeasuresHeadingLevel4" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left;">Measures</div>
                        <div id="MeasuresHeadingLevel3" class="lft-popup-col-selected-text Headerlevel4" style="width: 287px; float: left; display: none;">Measures</div>
                    </div>
                    <div class="FilterContent">
                        <div id="MeasureTypeShopperTripHeader" class="Lavel" style="height: 95%; display: none;"></div>
                        <div id="retailer-measure" class="trip" style="display: flex;">
                            <div id="MeasureTypeHeaderMainTrip" class="Lavel Sub-Lavel" style="height: 95%; display: block;"></div>
                            <div id="MeasureTypeHeaderContentTrip" class="Lavel Sub-Lavel" style="height: 95%;"></div>
                            <div id="MeasureTypeHeaderContentSubLevelTrip" class="Lavel Sub-Lavel" style="height: 95%;"></div>
                            <div id="MeasureTypeContentTrip" class="Lavel Sub-Lavel" style="height: 95%;"></div>
                        </div>
                        <div id="beverage-measure" class="Shopper" style="display: flex; display: none;">
                            <div id="MeasureTypeHeaderMainShopper" class="Lavel Sub-Lavel" style="height: 95%; display: none;"></div>
                            <div id="MeasureTypeHeaderContentShopper" class="Lavel Sub-Lavel" style="height: 95%; display: none;"></div>
                            <div id="MeasureTypeHeaderContentSubLevelShopper" class="Lavel Sub-Lavel" style="height: 95%; display: none;"></div>
                            <div id="MeasureTypeContentShopper" class="Lavel Sub-Lavel" style="height: 95%; display: none;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*End Measure Type*@
        @*Frequency*@
        <div class="FilterPopup Left-Frequency" style="display: none; height: 79%; width: auto;">
            <div id="FreqFilter-Left-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Left-Panel-FrequencyFilters" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="AdvancedFiltersDemoHeading">
                <div id="frequencyHeadingLevel1" class="lft-popup-col-selected-text" style="width: 287px; float: left;">Frequency</div>
                <div id="frequencyHeadingLevel2" class="lft-popup-col-selected-text" style="width: 287px; float: left; display: none;">Frequency</div>
                <div id="frequencyrHeadingLevel3" class="lft-popup-col-selected-text" style="width: 287px; float: left; display: none;">Frequency</div>
            </div>
            <div id="left-panel-frequency" style="height: 88%;"></div>

        </div>
        @*End Measure Type*@
        @*TotalMeasure Type*@
        <div class="FilterPopup TotalMeasure" style="display: none; width: auto;">
            <div id="TotalMeasure-Type-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-TotalMeasure-Type" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="TotalMeasureHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left; display: block;">Measure</div>
                <div id="TotalMeasureHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Measure</div>
                <div id="TotalMeasureHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Measure</div>
            </div>
            <div class="FilterContent">
                <div id="TotalMeasureShopperTripHeader" class="Lavel" style="height: 92%; display: none;">
                </div>
                <div id="total-measure-trip" class="trip" style="display: flex;">
                    <div id="TotalMeasureHeaderMainTrip" class="Lavel Sub-Lavel" style="height: 92%; display: block;"></div>
                    <div id="TotalMeasureHeaderContentTrip" class="TotalMeasureHeaderContent Lavel Sub-Lavel" style="height: 92%;"></div>
                </div>
                <div id="total-measure-shopper" class="Shopper" style="display: none;">
                    <div id="TotalMeasureHeaderMainShopper" class="Lavel Sub-Lavel" style="height: 92%; display: none;"></div>
                    <div id="TotalMeasureHeaderContentShopper" class="TotalMeasureHeaderContent Lavel Sub-Lavel" style="height: 92%; display: none;"></div>
                </div>
            </div>
        </div>
        @*End TotalMeasure Type*@
        @*Advanced Analytics*@

        <div class="FilterPopup Advanced-Analytics-Select-Variable" style="display: none; height: 79%; width: auto;">
            <div id="Advanced-AnalyticsFilter-Left-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Left-Advanced-AnalyticsFilters" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText CPMaps-MeasureSelectiontext" style="display: flex;">You can select minimum 3 Measures</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="advancedanalyticsHeadingLevel0" class="lft-popup-col-selected-text Headerlevel0" style="width: 270px; float: left; display: none;">Measure</div>
                <div id="advancedanalyticsHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 270px; float: left;">Measure</div>
                <div id="advancedanalyticsHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 245px; float: left; display: none;">>Shopper-Variables</div>
                <div id="advancedanalyticsHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">>Shopper-Variables</div>
            </div>

            @*<div id="ToShowShooperAndTrips" name="trip" class="Lavel rgt-cntrl-advanced-analytics-Conatiner" style="top: -1.25px; left: 0px; height: 83%; width: auto; float: left; display: none;"></div>*@
            <div id="CorrespondenceMeasureDivId"></div>
        </div>
        @*End Advanced Analytics*@
        @*Frequency*@
        <div class="FilterPopup Left-Channel-Visited" style="display: none; height: 79%; width: auto;">
            <div id="WherePurchased-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-Wherepurchased" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="AdvancedFiltersDemoHeading">
                <div id="frequencyHeadingLevel1" class="lft-popup-col-selected-text" style="width: 287px; float: left;">Where Purchased</div>
                <div id="frequencyHeadingLevel2" class="lft-popup-col-selected-text" style="width: 287px; float: left; display: none;">Frequency</div>
                <div id="frequencyrHeadingLevel3" class="lft-popup-col-selected-text" style="width: 287px; float: left; display: none;">Frequency</div>
            </div>

            @*<div style="float: left; overflow-y: auto; height: 86%;" id="rgt-cntrl-chnl-SubFilter1" class="rgt-cntrl-SubFilter DemoLevel Lavel Lavel1"></div>
                <div style="float: left; overflow-y: auto; height: 86%; display: none;" id="rgt-cntrl-chnl-SubFilter2" class="rgt-cntrl-SubFilter DemoLevel Lavel Lavel1"></div>
                <div style="float: left; overflow-y: auto; height: 86%; display: none" id="rgt-cntrl-chnl-SubFilter3" class="rgt-cntrl-SubFilter DemoLevel Lavel Lavel1"></div>*@
            <div id="beverage-where-purchased" style="height:86%;"></div>
        </div>
        @*End Measure Type*@
        @*AdvancedFilters*@
        <div class="FilterPopup AdvancedFilters" style="display: none; width: auto;">
            <div id="AdvancedFilter-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-AdvancedFilters" class="txt-search" name="Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="DemoHeadingLevel0" class="lft-popup-col-selected-text Headerlevel0" style="width: 287px; float: left; display: none;">Additional Filters</div>
                <div id="DemoHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left; display: none;">Demographic Filters</div>
                <div id="DemoHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Demographic Filters</div>
                <div id="DemoHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Demographic Filters</div>
                <div id="DemoHeadingLevel4" class="lft-popup-col-selected-text Headerlevel4" style="width: 287px; float: left; display: none;">Demographic Filters</div>
            </div>

            <div id="AdvFilterDivId" class="AdvFilterDiv">
                <div id="ToShowDemoAndAdvFilters" class="Lavel rgt-cntrl-Demo-Advanced-Conatiner" style="top: -1.25px; left: 0px; height: 95%; float: left; display: none;">
                    <div id="ToShowDemo" onclick="DisplayDemoOrVisitsFilters('ToShowDemo');" class="lft-popup-ele-label lft-popup-ele FilterStringContainerdiv" style="width: 95%; margin-top: 7%;float: left; border-bottom: 1px solid grey; cursor: pointer; height: auto;" name="DEMOGRAPHY FILTERS">
                        <span style="width:90%;margin-left:1%" class="lft-popup-ele-label">Demographic Filters</span><div class="ArrowContainerdiv" style="left: 0%;"><span class="lft-popup-ele-next sidearrw" style="float: right; cursor: pointer"></span></div>
                    </div>
                    <div id="ToShowadvanced" onclick="DisplayDemoOrVisitsFilters('ToShowadvanced');" class="lft-popup-ele-label lft-popup-ele FilterStringContainerdiv" style="width: 95%; float: left; border-bottom: 1px solid grey; cursor: pointer; height: auto;" name="ADDITIONAL FILTERS">
                        <span style="width:90%;margin-left:1%" class="lft-popup-ele-label">Additional Filters</span><div class="ArrowContainerdiv" style="left: 0%;"><span class="lft-popup-ele-next sidearrw" style="float: right; cursor: pointer"></span></div>
                    </div>
                </div>
                <div class="demomaindiv">
                    <div id="PrimaryAdvancedFilterContent" class="DemoLevel Lavel Lavel1" style="overflow-y: auto; display: none; height: 95%;">
                        <div id="PrimaryDemoFilterList" class="clsPrimaryDemoFilterList" style="height: auto; overflow: hidden;"></div>
                    </div>
                    <div id="SecondaryAdvancedFilterContent" class="DemoMeasureTypeHeaderMainLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none">
                        <div id="SecondaryDemoFilterList" class="clsSecondaryDemoFilterList"></div>
                    </div>
                    <div id="ThirdLevelAdvancedFilterContent" class="DemoLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none;">
                        <div id="ThirdDemoFilterList" class="clsThirdDemoFilterList"></div>
                    </div>
                    <div id="FourthLevelAdvancedFilterContent" class="DemoLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none;">
                        <div id="FourthDemoFilterList" class="clsFourthDemoFilterList"></div>
                    </div>
                </div>
                <div class="Advmaindiv">
                    <div id="PrimaryAdvancedFilterContentAdv" class="DemoLevel Lavel Lavel1" style="overflow-y: auto; display: none; height: 95%;">
                        <div id="PrimaryDemoFilterListAdv" class="clsPrimaryDemoFilterList" style="height: auto; overflow: hidden;"></div>
                    </div>
                    <div id="SecondaryAdvancedFilterContentAdv" class="DemoMeasureTypeHeaderMainLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none">
                        <div id="SecondaryDemoFilterListAdv" class="clsSecondaryDemoFilterList"></div>
                    </div>
                    <div id="ThirdLevelAdvancedFilterContentAdv" class="DemoLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none;">
                        <div id="ThirdDemoFilterListAdv" class="clsThirdDemoFilterList"></div>
                    </div>
                    <div id="FourthLevelAdvancedFilterContentAdv" class="DemoLevel DemoLevel2 Lavel2 Sub-Lavel" style="display: none;">
                        <div id="FourthDemoFilterListAdv" class="clsFourthDemoFilterList"></div>
                    </div>
                </div>
            </div>
        </div>
        @*End AdvancedFilters*@

        @*Competitor Frequency Popup*@
        <div class="CompetitorFrequency-Retailers" style="display: none; width: auto;z-index:100000;">
            <div class="custom-popup-header"><div class="custom-top-text"><span>CROSS RETAILER SHOPPER</span><br><div class="small">(DATA WILL BE SHOWN FOR COMPETITOR GUESTS FOR THE SELECTED FREQUENCY)</div></div><div class="custom-top-btm-brdr"></div></div>
            <div id="CompetitorFrequency-Retailer-Search-Content" class="Search-Filter">
                <div class="Search">
                    <input type="text" id="Search-CompetitorFrequency-Retailers" class="txt-search" name="CompetitorFrequency-Channel-Retailer-Search-Content" placeholder="Search.." />
                    <div class="img-search">
                    </div>
                </div>
            </div>
            <div class="selectionText RetailerSelectiontext">You can select Only One Retailers</div>
            <div class="AdvancedFiltersDemoHeading HeaderLevel">
                <div id="retailerHeadingLevel1" class="lft-popup-col-selected-text Headerlevel1" style="width: 287px; float: left;">Retailers</div>
                <div id="retailerHeadingLevel2" class="lft-popup-col-selected-text Headerlevel2" style="width: 287px; float: left; display: none;">Retailers</div>
                <div id="retailerHeadingLevel3" class="lft-popup-col-selected-text Headerlevel3" style="width: 287px; float: left; display: none;">Retailers</div>
            </div>
            <div id="CompetitorFrequency-RetailerDivId" class="CompetitorFrequency-RetailerDiv">
                @* <div id="ChannelOrCategoryContent" class="Lavel" style="height: 95%;"></div>*@
            </div>
            <div class="custom-bottom-border"></div>
            <div class="custom-cancel-submit">
                <div id="custom-base-on-submit" class="custom-submit" onclick="competitor_submit()">
                    <div class="custom-submit-inner"><div class="vertical-align">OK</div></div>
                </div>
                @*<div id="competitor-cancel" class="custom-cancel" onclick="competitor_cancel()">
                    <div class="vertical-align">Cancel</div>
                </div>*@
                @*<div id="custom-base-customise" style="display:none;" class="custom-cancel">
                    <div class="vertical-align">Customize</div>
                </div>*@
                <div id="custom-base-customise-ok" style="display:none;margin-right: 10px;" class="custom-submit">
                    <div class="custom-submit-inner"><div class="vertical-align">OK</div></div>
                </div>
            </div>
        </div>
        @*End Competitor Frequency Popup*@

    </div>
    <div id="Translucent" class="TranslucentDiv" style="display: none;"></div>
    <div id="TranslucentDB" class="TranslucentDivDB" style="display: none;"></div>
    <div id="Loader" style="display: none;">
        <img src="~/Images/ishop-loader.gif?id5" width="200" height="90">
    </div>
    <input type="hidden" class="timeType" />
    <input type="hidden" class="totime" />
    <div id="Channel-Retailer-Search-Content" style="display: none;">
    </div>
    <div id="MouseHoverBigDiv" style="display: none;">
        <div class="ContainerClass">
            <div class="HeadingText">
                <div class="mouseOverImageTitleBottom"></div>
            </div>

            <div class="TextContainer"></div>
        </div>
    </div>
    <div id="MouseHoverSmallDiv" style="display: none;">
        <div class="ContainerClass">
            <div class="HeadingTextsmall" style="height: auto;">
                <div class="mouseOverImageTitleBottom" style="margin-top: 27px;"></div>
            </div>

            <div class="TextContainersmall"></div>
        </div>
    </div>
    <div id="MouseHoverSmallerDiv" style="display: none;">
        <div class="topleftimage"></div>
        <div class="leftbottomimage"></div>
        <div class="toprightimage"></div>
        <div class="centerdivdark">
            <div class="mousehoversmallpopuptext"></div>
        </div>
    </div>
    <div id="MouseHoverExtraSmallDiv" style="display: none;">
        <div class="topleftimage"></div>
        <div class="leftbottomimage"></div>
        <div class="toprightimage"></div>
        <div class="centerdivlight">
            <div class="mousehoversmallpopuptext"></div>
        </div>
    </div>
    @*Export to excel popup*@
    <div class="exporttoexcelpopup" style="display: none;">
        @*  <div id="excel-title" class="stat-heading" style="text-align: center;">Export To Excel</div>*@
        <div class="stat-clsebtn"></div>
        <div class="stat-closediv">
            <div class="stat-heading">EXPORT TO EXCEL</div>
        </div>
        <div class="ExcelSelection">
            <ul>
                <li>
                    <input class="exporttoexcel" type="checkbox" name="divshopperaccrossDemographicProfiling activefactsheettab" onclick="CheckSelectOrUnSelectSheets();"><span>Demographic Profiling</span>
                </li>
                <li>
                    <input class="exporttoexcel" type="checkbox" name="divshopperaccrossGeneral inactivefactsheettab" onclick="CheckSelectOrUnSelectSheets();"><span>General</span>
                </li>
                <li>
                    <input class="exporttoexcel" type="checkbox" name="divshopperaccrossStoreImagery inactivefactsheettab" onclick="CheckSelectOrUnSelectSheets();"><span>Store Imagery</span>
                </li>
                <li>
                    <input class="exporttoexcel" type="checkbox" name="divshopperaccrossBeverageDetail inactivefactsheettab" onclick="CheckSelectOrUnSelectSheets();"><span>Beverage Detail</span>
                </li>
            </ul>
        </div>
        <div class="ExcelSelectAll">
            <input id="chk_SelectAll" type="checkbox" onclick="SelectOrUnSelectAllSheets(this);">Select All
        </div>
        <div class="InfoForTimeSpent">
            Please note the more tabs you download,
            <br />
            the longer the load time will be
        </div>
        <div class="ExcelButtonArea">
            <table>
                <tbody>
                    <tr>
                        <td>
                            <div class="stat-submt" style="margin: 0;" onclick="GenerateExportToExcel();">OK</div>
                        </td>
                        <td style="padding-left: 10px;">
                            <div class="stat-cancel" onclick="CloseExportToExcel();">Cancel</div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    @*end*@

    @*Report Popup*@
    @*<div id="report-popup" class="null-error-popup" style="display: none;">*@
    <div id="report-popup" class="save-reportPopup popup_css" style="display: none;">
        <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="CloseReportPopup()"></div></div>
        <div class="save-section">
            <div class="report-selection">
                <div class="stat-closediv popup_css_header">
                    <div class="stat-heading heading_text">Sample size is less than 30 for the following</div>
                </div>
                <div class="proceed-data">
                    <div class="list-of-nulls">
                        <div class="stat-custdiv" style="pointer-events:none"><div class="stat-cust-dot"></div><div class="stat-cust-estabmt popup1"></div></div>
                    </div>
                </div>
            </div>
            <div class="save-popup-btn">
                <div class="stat-submt save-proceed-btn proceedClick" onclick="ProceedGenerateReport()" style="margin-left: 25px;">PROCEED</div>
                <div class="stat-submt cancel-proceed-btn closeSavePopup" onclick="CloseReportPopup()">CANCEL</div>
            </div>
        </div>
    </div>
    @*</div>*@
    @*End Report Popup*@

    @*SAR Report Popup*@
    <div id="sar-report-popup" class="save-reportPopup popup_css" style="display: none;">
        <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="CloseSarReportPopup()"></div></div>
        <div class="save-section">
            <div class="report-selection">
                <div class="stat-closediv popup_css_header">
                    <div class="stat-heading heading_text">Sample size is less than 30 for the following</div>
                </div>
                <div class="proceed-data">
                    <div class="list-of-nulls">
                        <div class="stat-custdiv" style="pointer-events:none"><div class="stat-cust-dot"></div><div class="stat-cust-estabmt popup1"></div></div>
                    </div>
                </div>
            </div>
            <div class="save-popup-btn">
                <div class="stat-submt save-proceed-btn proceedClick" onclick="ProceedSarGenerateReport()" style="margin-left: 25px;">PROCEED</div>
                <div class="stat-submt cancel-proceed-btn closeSavePopup" onclick="CloseSarReportPopup()">CANCEL</div>
            </div>
        </div>
    </div>
        <div id="sar-shopper-report-popup" class="save-reportPopup popup_css" style="display: none;height:156px;width:550px;">
            <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="CloseSarPopupMSS()"></div></div>
            <div class="save-section">
                <div class="report-selection">
                    <div class="stat-closediv popup_css_header" style="border-bottom:none;">
                        <div id="downlaodtext" class="stat-heading heading_text">Only shopper slides will be downloaded as trip sample is insufficient</div>
                        <div id="downlaodtext2" class="stat-heading heading_text" style="display:none;">Only Trip slides will be downloaded as trip filter is selected</div>
                        <div id="downlaodtext3" class="stat-heading heading_text" style="display:none;">Only Trip slides will be downloaded as non-priority retailer is selected</div>
                    </div>
                    @*<div class="proceed-data">
                            <div class="list-of-nulls-sitn">
                            </div>
                        </div>*@
                </div>
                <div class="save-popup-btn">
                    <div class="stat-submt save-proceed-btn proceedClick" onclick="ProceedSarRetailerMSS()">PROCEED</div>
                    <div class="stat-submt cancel-proceed-btn closeSavePopup" onclick="CloseSarPopupMSS()">CANCEL</div>
                </div>
            </div>
        </div>
    <div id="sar-download-report-popup" class="save-reportPopup popup_css" style="display: none;height:156px;width:550px;">
        <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="CloseSarDownReportPopup()"></div></div>
        <div class="save-section">
            <div class="report-selection">
                <div class="stat-closediv popup_css_header" style="border-bottom:none;">
                    <div id="downlaodtext" class="stat-heading heading_text">The "Share of Shopper & Trips" slide will not be downloaded as Competitors have low trip Sample Size</div>
                </div>
                @*<div class="proceed-data">
                        <div class="list-of-nulls-sitn">
                        </div>
                    </div>*@
            </div>
            <div class="save-popup-btn">
                <div class="stat-submt save-proceed-btn proceedClick" onclick="ProceedSarDownGenerateReport()">PROCEED</div>
                <div class="stat-submt cancel-proceed-btn closeSavePopup" onclick="CloseSarDownReportPopup()">CANCEL</div>
            </div>
        </div>
    </div>
    <div class="custom-color-palte popup_css" style="display:none;z-index:10000">
        <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="closeColorPopup()"></div></div>
        <div class="stat-closediv popup_css_header">
            <div class="stat-heading heading_text">SELECT COLOR FOR RETAILER</div>
        </div>
        <div class="customcolor-content">

        </div>
        <div class="stat-submtdiv">
            <div class="stat-submt" onclick="customcolrSubmit()">Download</div>
            <div class="stat-cancel" onclick="customcolrCancel()">Cancel</div>
        </div>
    </div>

    @*End SAR Report Popup*@

    @*Color Palette Popup*@
    <div class="colorpalletwithTranslucentBG" style="display:none;">
        <div id="colorpalletmaincontainer">
            <div class="colorpalletsubcontainer">
                <div id="customcolorpickercontainer">
                </div>
                <div class="headerColorSec">
                    <div class="colorHeader"><div class="pos_rel"><div class="vertical-align" style="color:#FFFFFF; font-size:12px; font-family:'Chivo', sans-serif;">Color model : RGB</div></div></div>
                    <div class="colorCodeDisplay">
                        <input class="jscolor {onFineChange:'update(this)',height:100,width:150,shadow:false,pointerBorderWidth:0,BorderWidth:0}" id="colorPicker" value="ffcc00" container="#color-container" readonly="readonly">
                    </div>
                </div>
                <div class="colorRGB colorRed">
                    <div class="coltext"><div class="pos_rel"><div class="vertical-align" style="color:#FFFFFF; font-size:12px; font-family:'Chivo', sans-serif;">Red</div></div></div>
                    <div class="colVal">
                        <div class="valDisplay redVal"><input type="text" min="0" max="255" maxlength="3" value="0" /></div>
                        <div class="updownDiv">
                            <div class="up" data-val="redVal" id="redVal"><div class="uparrowColor"></div></div>
                            <div class="down" data-val="redVal"><div class="downarrowColor"></div></div>
                        </div>
                    </div>
                </div>
                <div class="colorRGB colorGreen">
                    <div class="coltext"><div class="pos_rel"><div class="vertical-align" style="color:#FFFFFF; font-size:12px; font-family:'Chivo', sans-serif;">Green</div></div></div>
                    <div class="colVal">
                        <div class="valDisplay greenVal"><input type="text" min="0" max="255" maxlength="3" value="0" /></div>
                        <div class="updownDiv">
                            <div class="up" data-val="greenVal"><div class="uparrowColor"></div></div>
                            <div class="down" data-val="greenVal"><div class="downarrowColor"></div></div>
                        </div>
                    </div>
                </div>
                <div class="colorRGB colorBlue">
                    <div class="coltext"><div class="pos_rel"><div class="vertical-align" style="color:#FFFFFF; font-size:12px; font-family:'Chivo', sans-serif;">Blue</div></div></div>
                    <div class="colVal">
                        <div class="valDisplay blueVal"><input type="text" min="0" max="255" maxlength="3" value="0" /></div>
                        <div class="updownDiv">
                            <div class="up" data-val="blueVal"><div class="uparrowColor"></div></div>
                            <div class="down" data-val="blueVal"><div class="downarrowColor"></div></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="colorButtons">
                <div>
                    <div class="color_ok"><div class="pos_rel"><div class="vertical-align">OK</div></div></div>
                    <div class="color_cancel"><div class="pos_rel"><div class="vertical-align">CANCEL</div></div></div>
                </div>
            </div>
        </div>
    </div>
    @*End Color Palette Popup *@

    @*Low Sample Size popup*@
    <div id="lowsample-popup" class="save-reportPopup popup_css" style="display: none;">
        <div class="stat-topdiv"><div class="stat-topband topband"></div><div class="stat-clsebtn" onclick="CloseLowSamplePopup()"></div></div>
        <div class="save-section">
            <div class="report-selection">
                <div class="stat-closediv popup_css_header">
                    <div class="stat-heading heading_text">Sample size is less than 30 for the following</div>
                </div>
                <div class="proceed-data">
                    <div class="list-of-nulls">
                        <div class="stat-custdiv" style="pointer-events:none"><div class="stat-cust-dot"></div><div class="stat-cust-estabmt popup1"></div></div>
                    </div>
                </div>
            </div>
            <div class="save-popup-btn">
                <div class="stat-submt save-proceed-btn proceedClick" onclick="ProceedWithChart()" style="margin-left: 25px;">PROCEED</div>
                <div class="stat-submt cancel-proceed-btn closeSavePopup" onclick="CloseLowSamplePopup()">CANCEL</div>
            </div>
        </div>
    </div>


    @*custom base*@
    <div class="stat-popup" style="display: none;">
        <div class="stat-topdiv">
            <div class="stat-topband"></div>
            <div class="stat-clsebtn"></div>
        </div>
        <div class="stat-closediv">
            <div class="stat-heading">SELECT A STATISTICAL COMPARISON POINT</div>
            <div class="stat-sub-heading">(ALL OTHER OPTIONS WILL BE STAT TESTED AGAINST YOUR SELECTION)</div>
        </div>
        <div class="stat-content">
        </div>
        <div class="stat-submtdiv">
            <div class="stat-submt" onclick="custombaseSubmit();">Submit</div>
            <div class="stat-cancel">Cancel</div>
        </div>
    </div>
    @*end*@

    @*custom base*@
    <div class="LowSample-popup" style="display: none;">
        <div class="LowSample-topdiv">
            <div class="LowSample-topband"></div>
            <div class="LowSample-clsebtn"></div>
        </div>
        <div class="LowSample-closediv">
            <div class="LowSample-heading">LOW SAMPLE SIZE</div>
        </div>
        <div class="LowSample-content">
        </div>
        <div class="LowSample-submtdiv">
            <div class="LowSample-submt" onclick="LowSampleProceed();">Submit</div>
            <div class="LowSample-cancel">Cancel</div>
        </div>
    </div>
    @*end*@

    @*stat setting*@
    <div class="StatArea" style="display: none;">
        <div class="StatTop">
            <div name="StatArea" class="stat-clsebtn"></div>
        </div>
        <div>
            <table>
                <tbody>
                    <tr>
                        <td class="StatTestArea">
                            <table>
                                <tbody>
                                    <tr>
                                        <td style="padding: 5px; color: #E41E2A;">
                                            Stat Testing Level (this session only)
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="StatTestValue" id="stat80" onclick="GetStatValue('1.2816','-1.2816','80')">
                                                80%
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="StatTestValue" id="stat90" onclick="GetStatValue('1.6449','-1.6449','90')">
                                                90%
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="StatTestValue" id="stat95" style="" onclick="GetStatValue('1.96','-1.96','95')">
                                                95% (default &amp; K&amp;I Recommended)
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div class="StatTestValue" id="stat99" onclick="GetStatValue('2.5758','-2.5758','99')">
                                                99%
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td class="StatText-des">
                            <div class="StatText">
                                <div style="font-size: 16px; color: #E41E2A;">
                                    Important things to consider about stat
                                    testing
                                </div>
                                <p style="font-size: 12px;">
                                    Testing for statistical significance is a way to determine the likelihood  that
                                    observed differences between two samples are due to genuine differences in the groups
                                    and not due to sampling error.   Levels of statistical significance are calculated
                                    to identify how confidence one should be that the observed difference is genuine.
                                </p>
                                <p style="font-size: 12px;">
                                    The different levels of Stat Testing denote the level of confidence needed in an
                                    analysis.  For example, if two values are statistically different at 80%, it’s like
                                    saying the  difference is genuine  4 out of 5 times.   It also implies there is
                                    a 1 in 5 chance that there is not a difference in the values due to sampling error.
                                    Using a higher statistical threshold will produce a more confident number.  Example,
                                    if two numbers are different and significant at 95%,  the difference is expected
                                    to be genuine  95 out of 100 times.  Or put another way,  you would only make the
                                    wrong interpretation 1 out of 20 times.

                                </p>
                                <p style="font-size: 12px;">
                                    Larger levels of significance are far safer when defending data, but they take larger
                                    samples size to show a true difference.
                                </p>
                                <p style="font-size: 12px;">
                                    K&amp;I recommends 95%, but encourages 99% as sample sizes grow very large.  Only rely
                                    on lower confidence intervals as a last resort, but be prepared to defend your decision
                                    to do so.
                                </p>
                                <div class="stat-submt" style="float: right; margin-bottom: 10px;" onclick="SelectStatValue()">
                                    Select
                                </div>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>


    </div>
    @*end*@
    @*export to excel*@
    <div class="exportchartlistpopup" style="display: none;">
        <div name="StatArea" class="stat-clsebtn"></div>
        <div class="stat-closediv">
            <div class="stat-heading">EXPORT CHART LIST</div>
        </div>
        <table>
            <tbody>
                <tr>
                    <td colspan="2">
                        <div class="ExportSelection">
                            <div id="exportchartlist"></div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    @*end*@

    @*alert popups*@
    <div class="show-message-container" style="display: none;">
        <div class="alert-message-close"></div>
        <div class="alert-message">Please select minimum 2 Establishments</div>
    </div>
    @*end*@
    @Html.Hidden("URLError", Url.Action("Error", "Error"))
    @Html.Hidden("URLLeftPanelFilters", Url.Action("GetFilters", "Home"))
    @Html.Hidden("URLViewFilters", Url.Action("GetViewFilters", "Home"))

    @Html.Hidden("URLDemographic", Url.Action("Demographic", "Dashboard"))
    @Html.Hidden("URLBrandhealth", Url.Action("Brandhealth", "Dashboard"))
    @Html.Hidden("URLVisits", Url.Action("Visits", "Dashboard"))
    @Html.Hidden("URLPathToPurchase", Url.Action("PathToPurchase", "Dashboard"))
    @Html.Hidden("URLPathToPurchaseData", Url.Action("GetPathToPurchaseData", "Dashboard"))
    @Html.Hidden("URLDemographicData", Url.Action("GetDemographicData", "Dashboard"))
    @Html.Hidden("URLCommonGetStatTest", Url.Action("GetStatTestValue", "Common"))
    @Html.Hidden("URLCommonStatTest", Url.Action("SetStatTestValue", "Common"))
    @Html.Hidden("URLCommonRegions", Url.Action("CustomRegionsFunction", "Common"))
    @Html.Hidden("URLCommon", Url.Action("GetFilters", "Common"))
    @Html.Hidden("URLCommon_LogSelection", Url.Action("LogSelection", "Common"))

    @Html.Hidden("URLCommonEcommerce", Url.Action("GetECommerceFilters", "Common"))
    @Html.Hidden("URLDashboard", Url.Action("", "Dashboard"))
    @Html.Hidden("URLDashboardPopUpExp", Url.Action("PopupExportDashboard", "Dashboard"))
    @Html.Hidden("URLDashboardFullExp", Url.Action("ExportToFullDashboardPPT", "Dashboard"))
    @Html.Hidden("URLDemogDashboardFullExp", Url.Action("ExportToDemogDashboardPPT", "Dashboard"))
    @Html.Hidden("URLDashboardDownloadExpPPT", Url.Action("DownloadFullDashboardPPT", "Dashboard"))
    @Html.Hidden("URLDemogDashboardDownloadExpPPT", Url.Action("DownloadFullDemogDashboardPPT", "Dashboard"))
    @Html.Hidden("URLDemogDashboardDownloadExpPDF", Url.Action("DownloadFullDemogDashboardPDF", "Dashboard"))
    @Html.Hidden("URLDashboardDownloadExpPDF", Url.Action("DownloadFullDashboardPDF", "Dashboard"))
    @Html.Hidden("URLDashboardSaveUserSelection", Url.Action("SaveUserSelection", "Dashboard"))
    @Html.Hidden("URLDashboardSaveUserSelectionDemo", Url.Action("SaveUserSelectionDemo", "Dashboard"))
    @Html.Hidden("URLTables", Url.Action("", "Tables"))
    @Html.Hidden("URLCharts", Url.Action("", "Charts"))
    @Html.Hidden("URLReports", Url.Action("", "Reports"))
    @Html.Hidden("URLAnalysis", Url.Action("", "Analysis"))
    @Html.Hidden("URLComparisonRetailerFrequencies", Url.Action("GetRetailersData", "Analysis"))
    @Html.Hidden("URLBGM", Url.Action("GetISHOPBGMData", "Analysis"))
    @Html.Hidden("URLCrossRetailerImageries", Url.Action("GetRetailersPerceptionsData", "Analysis"))
    @Html.Hidden("URLSOAP", Url.Action("GetISHOPSOAPData", "Analysis"))
    @Html.Hidden("URLESTABLISHMENTDEEPDIVE", Url.Action("GetEstablishmentDeepDiveData", "Analysis"))
    @Html.Hidden("URLESTABLISHMENTDEEPDIVEPPT", Url.Action("ExportToFullEstablishmentDeepDivePPT", "Analysis"))
    @Html.Hidden("URLESTABLISHMENTDEEPDIVEPPTDOWNLOAD", Url.Action("DownloadFullEstablishmentDeepDivePPT", "Analysis"))
    @Html.Hidden("URLAdvancedAnalyticsComparisonRetailer", Url.Action("", "Analysis"))
    @Html.Hidden("URLHomeFrom", Url.Action("GetKIUserDetails", "Home"))
    @Html.Hidden("URLHome", Url.Action("KIHome", "Home"))
    @Html.Hidden("URLSignOut", Url.Action("SignOut", "Home"))
    @Html.Hidden("URLGetCompetitorsList", Url.Action("GetCompetitorList", "Reports"))
    @Html.Hidden("URLvalidateSampleSize", Url.Action("validateSampleSize", "Reports"))
    @Html.Hidden("URLdownloadSarReport", Url.Action("downloadSarReport", "Reports"))
    @Html.Hidden("URLdownloadSarReportFile", Url.Action("DownloadSARReportFile", "Reports"))
    @*<script>
        //Only for Color Pallet
        if (!window.jscolor) {
            window.jscolor = (function () {
                var jsc = {
                    register: function () {
                        jsc.attachDOMReadyEvent(jsc.init);
                        jsc.attachEvent(document, 'mousedown', jsc.onDocumentMouseDown);
                        jsc.attachEvent(document, 'touchstart', jsc.onDocumentTouchStart);
                        jsc.attachEvent(window, 'resize', jsc.onWindowResize);
                    },
                    init: function () {
                        if (jsc.jscolor.lookupClass) {
                            jsc.jscolor.installByClassName(jsc.jscolor.lookupClass);
                        }
                    },
                    tryInstallOnElements: function (elms, className) {
                        var matchClass = new RegExp('(^|\\s)(' + className + ')(\\s*(\\{[^}]*\\})|\\s|$)', 'i');

                        for (var i = 0; i < elms.length; i += 1) {
                            if (elms[i].type !== undefined && elms[i].type.toLowerCase() == 'color') {
                                if (jsc.isColorAttrSupported) {
                                    // skip inputs of type 'color' if supported by the browser
                                    continue;
                                }
                            }
                            var m;
                            if (!elms[i].jscolor && elms[i].className && (m = elms[i].className.match(matchClass))) {
                                var targetElm = elms[i];
                                var optsStr = null;

                                var dataOptions = jsc.getDataAttr(targetElm, 'jscolor');
                                if (dataOptions !== null) {
                                    optsStr = dataOptions;
                                } else if (m[4]) {
                                    optsStr = m[4];
                                }

                                var opts = {};
                                if (optsStr) {
                                    try {
                                        opts = (new Function('return (' + optsStr + ')'))();
                                    } catch (eParseError) {
                                        jsc.warn('Error parsing jscolor options: ' + eParseError + ':\n' + optsStr);
                                    }
                                }
                                targetElm.jscolor = new jsc.jscolor(targetElm, opts);
                            }
                        }
                    },


                    isColorAttrSupported: (function () {
                        var elm = document.createElement('input');
                        if (elm.setAttribute) {
                            elm.setAttribute('type', 'color');
                            if (elm.type.toLowerCase() == 'color') {
                                return true;
                            }
                        }
                        return false;
                    })(),


                    isCanvasSupported: (function () {
                        var elm = document.createElement('canvas');
                        return !!(elm.getContext && elm.getContext('2d'));
                    })(),


                    fetchElement: function (mixed) {
                        return typeof mixed === 'string' ? document.getElementById(mixed) : mixed;
                    },


                    isElementType: function (elm, type) {
                        return elm.nodeName.toLowerCase() === type.toLowerCase();
                    },


                    getDataAttr: function (el, name) {
                        var attrName = 'data-' + name;
                        var attrValue = el.getAttribute(attrName);
                        if (attrValue !== null) {
                            return attrValue;
                        }
                        return null;
                    },


                    attachEvent: function (el, evnt, func) {
                        if (el.addEventListener) {
                            el.addEventListener(evnt, func, false);
                        } else if (el.attachEvent) {
                            el.attachEvent('on' + evnt, func);
                        }
                    },


                    detachEvent: function (el, evnt, func) {
                        if (el.removeEventListener) {
                            el.removeEventListener(evnt, func, false);
                        } else if (el.detachEvent) {
                            el.detachEvent('on' + evnt, func);
                        }
                    },


                    _attachedGroupEvents: {},


                    attachGroupEvent: function (groupName, el, evnt, func) {
                        if (!jsc._attachedGroupEvents.hasOwnProperty(groupName)) {
                            jsc._attachedGroupEvents[groupName] = [];
                        }
                        jsc._attachedGroupEvents[groupName].push([el, evnt, func]);
                        jsc.attachEvent(el, evnt, func);
                    },


                    detachGroupEvents: function (groupName) {
                        if (jsc._attachedGroupEvents.hasOwnProperty(groupName)) {
                            for (var i = 0; i < jsc._attachedGroupEvents[groupName].length; i += 1) {
                                var evt = jsc._attachedGroupEvents[groupName][i];
                                jsc.detachEvent(evt[0], evt[1], evt[2]);
                            }
                            delete jsc._attachedGroupEvents[groupName];
                        }
                    },


                    attachDOMReadyEvent: function (func) {
                        var fired = false;
                        var fireOnce = function () {
                            if (!fired) {
                                fired = true;
                                func();
                            }
                        };

                        if (document.readyState === 'complete') {
                            setTimeout(fireOnce, 1); // async
                            return;
                        }

                        if (document.addEventListener) {
                            document.addEventListener('DOMContentLoaded', fireOnce, false);

                            // Fallback
                            window.addEventListener('load', fireOnce, false);

                        } else if (document.attachEvent) {
                            // IE
                            document.attachEvent('onreadystatechange', function () {
                                if (document.readyState === 'complete') {
                                    document.detachEvent('onreadystatechange', arguments.callee);
                                    fireOnce();
                                }
                            })

                            // Fallback
                            window.attachEvent('onload', fireOnce);

                            // IE7/8
                            if (document.documentElement.doScroll && window == window.top) {
                                var tryScroll = function () {
                                    if (!document.body) { return }
                                    try {
                                        document.documentElement.doScroll('left');
                                        fireOnce();
                                    } catch (e) {
                                        setTimeout(tryScroll, 1);
                                    }
                                };
                                tryScroll();
                            }
                        }
                    },


                    warn: function (msg) {
                        if (window.console && window.console.warn) {
                            window.console.warn(msg);
                        }
                    },


                    preventDefault: function (e) {
                        if (e.preventDefault) { e.preventDefault() }
                        e.returnValue = false;
                    },


                    captureTarget: function (target) {
                        // IE
                        if (target.setCapture) {
                            jsc._capturedTarget = target;
                            jsc._capturedTarget.setCapture();
                        }
                    },


                    releaseTarget: function () {
                        // IE
                        if (jsc._capturedTarget) {
                            jsc._capturedTarget.releaseCapture();
                            jsc._capturedTarget = null;
                        }
                    },


                    fireEvent: function (el, evnt) {
                        if (!el) {
                            return;
                        }
                        if (document.createEvent) {
                            var ev = document.createEvent('HTMLEvents');
                            ev.initEvent(evnt, true, true);
                            el.dispatchEvent(ev);
                        } else if (document.createEventObject) {
                            var ev = document.createEventObject();
                            el.fireEvent('on' + evnt, ev);
                        } else if (el['on' + evnt]) { // alternatively use the traditional event model
                            el['on' + evnt]();
                        }
                    },


                    classNameToList: function (className) {
                        return className.replace(/^\s+|\s+$/g, '').split(/\s+/);
                    },


                    // The className parameter (str) can only contain a single class name
                    hasClass: function (elm, className) {
                        if (!className) {
                            return false;
                        }
                        return -1 != (' ' + elm.className.replace(/\s+/g, ' ') + ' ').indexOf(' ' + className + ' ');
                    },


                    // The className parameter (str) can contain multiple class names separated by whitespace
                    setClass: function (elm, className) {
                        var classList = jsc.classNameToList(className);
                        for (var i = 0; i < classList.length; i += 1) {
                            if (!jsc.hasClass(elm, classList[i])) {
                                elm.className += (elm.className ? ' ' : '') + classList[i];
                            }
                        }
                    },


                    // The className parameter (str) can contain multiple class names separated by whitespace
                    unsetClass: function (elm, className) {
                        var classList = jsc.classNameToList(className);
                        for (var i = 0; i < classList.length; i += 1) {
                            var repl = new RegExp(
                                '^\\s*' + classList[i] + '\\s*|' +
                                '\\s*' + classList[i] + '\\s*$|' +
                                '\\s+' + classList[i] + '(\\s+)',
                                'g'
                            );
                            elm.className = elm.className.replace(repl, '$1');
                        }
                    },


                    getStyle: function (elm) {
                        return window.getComputedStyle ? window.getComputedStyle(elm) : elm.currentStyle;
                    },


                    setStyle: (function () {
                        var helper = document.createElement('div');
                        var getSupportedProp = function (names) {
                            for (var i = 0; i < names.length; i += 1) {
                                if (names[i] in helper.style) {
                                    return names[i];
                                }
                            }
                        };
                        var props = {
                            borderRadius: getSupportedProp(['borderRadius', 'MozBorderRadius', 'webkitBorderRadius']),
                            boxShadow: getSupportedProp(['boxShadow', 'MozBoxShadow', 'webkitBoxShadow'])
                        };
                        return function (elm, prop, value) {
                            switch (prop.toLowerCase()) {
                                case 'opacity':
                                    var alphaOpacity = Math.round(parseFloat(value) * 100);
                                    elm.style.opacity = value;
                                    elm.style.filter = 'alpha(opacity=' + alphaOpacity + ')';
                                    break;
                                default:
                                    elm.style[props[prop]] = value;
                                    break;
                            }
                        };
                    })(),


                    setBorderRadius: function (elm, value) {
                        jsc.setStyle(elm, 'borderRadius', value || '0');
                    },


                    setBoxShadow: function (elm, value) {
                        jsc.setStyle(elm, 'boxShadow', value || 'none');
                    },


                    getElementPos: function (e, relativeToViewport) {
                        var x = 0, y = 0;
                        var rect = e.getBoundingClientRect();
                        x = rect.left;
                        y = rect.top;
                        if (!relativeToViewport) {
                            var viewPos = jsc.getViewPos();
                            x += viewPos[0];
                            y += viewPos[1];
                        }
                        return [x, y];
                    },


                    getElementSize: function (e) {
                        return [e.offsetWidth, e.offsetHeight];
                    },


                    // get pointer's X/Y coordinates relative to viewport
                    getAbsPointerPos: function (e) {
                        if (!e) { e = window.event }
                        var x = 0, y = 0;
                        if (typeof e.changedTouches !== 'undefined' && e.changedTouches.length) {
                            // touch devices
                            x = e.changedTouches[0].clientX;
                            y = e.changedTouches[0].clientY;
                        } else if (typeof e.clientX === 'number') {
                            x = e.clientX;
                            y = e.clientY;
                        }
                        return { x: x, y: y };
                    },


                    // get pointer's X/Y coordinates relative to target element
                    getRelPointerPos: function (e) {
                        if (!e) { e = window.event }
                        var target = e.target || e.srcElement;
                        var targetRect = target.getBoundingClientRect();

                        var x = 0, y = 0;

                        var clientX = 0, clientY = 0;
                        if (typeof e.changedTouches !== 'undefined' && e.changedTouches.length) {
                            // touch devices
                            clientX = e.changedTouches[0].clientX;
                            clientY = e.changedTouches[0].clientY;
                        } else if (typeof e.clientX === 'number') {
                            clientX = e.clientX;
                            clientY = e.clientY;
                        }

                        x = clientX - targetRect.left;
                        y = clientY - targetRect.top;
                        return { x: x, y: y };
                    },


                    getViewPos: function () {
                        var doc = document.documentElement;
                        return [
                            (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0),
                            (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)
                        ];
                    },


                    getViewSize: function () {
                        var doc = document.documentElement;
                        return [
                            (window.innerWidth || doc.clientWidth),
                            (window.innerHeight || doc.clientHeight),
                        ];
                    },


                    redrawPosition: function () {

                        if (jsc.picker && jsc.picker.owner) {
                            var thisObj = jsc.picker.owner;

                            var tp, vp;

                            if (thisObj.fixed) {
                                // Fixed elements are positioned relative to viewport,
                                // therefore we can ignore the scroll offset
                                tp = jsc.getElementPos(thisObj.targetElement, true); // target pos
                                vp = [0, 0]; // view pos
                            } else {
                                tp = jsc.getElementPos(thisObj.targetElement); // target pos
                                vp = jsc.getViewPos(); // view pos
                            }

                            var ts = jsc.getElementSize(thisObj.targetElement); // target size
                            var vs = jsc.getViewSize(); // view size
                            var ps = jsc.getPickerOuterDims(thisObj); // picker size
                            var a, b, c;
                            switch (thisObj.position.toLowerCase()) {
                                case 'left': a = 1; b = 0; c = -1; break;
                                case 'right': a = 1; b = 0; c = 1; break;
                                case 'top': a = 0; b = 1; c = -1; break;
                                default: a = 0; b = 1; c = 1; break;
                            }
                            var l = (ts[b] + ps[b]) / 2;

                            // compute picker position
                            if (!thisObj.smartPosition) {
                                var pp = [
                                    tp[a],
                                    tp[b] + ts[b] - l + l * c
                                ];
                            } else {
                                var pp = [
                                    -vp[a] + tp[a] + ps[a] > vs[a] ?
                                        (-vp[a] + tp[a] + ts[a] / 2 > vs[a] / 2 && tp[a] + ts[a] - ps[a] >= 0 ? tp[a] + ts[a] - ps[a] : tp[a]) :
                                        tp[a],
                                    -vp[b] + tp[b] + ts[b] + ps[b] - l + l * c > vs[b] ?
                                        (-vp[b] + tp[b] + ts[b] / 2 > vs[b] / 2 && tp[b] + ts[b] - l - l * c >= 0 ? tp[b] + ts[b] - l - l * c : tp[b] + ts[b] - l + l * c) :
                                        (tp[b] + ts[b] - l + l * c >= 0 ? tp[b] + ts[b] - l + l * c : tp[b] + ts[b] - l - l * c)
                                ];
                            }

                            var x = pp[a];
                            var y = pp[b];
                            var positionValue = thisObj.fixed ? 'fixed' : 'absolute';
                            var contractShadow =
                                (pp[0] + ps[0] > tp[0] || pp[0] < tp[0] + ts[0]) &&
                                (pp[1] + ps[1] < tp[1] + ts[1]);

                            jsc._drawPosition(thisObj, x, y, positionValue, contractShadow);
                        }
                    },


                    _drawPosition: function (thisObj, x, y, positionValue, contractShadow) {
                        var vShadow = contractShadow ? 0 : thisObj.shadowBlur; // px

                        jsc.picker.wrap.style.position = positionValue;
                        jsc.picker.wrap.style.left = x + 'px';
                        jsc.picker.wrap.style.top = y + 'px';

                        jsc.setBoxShadow(
                            jsc.picker.boxS,
                            thisObj.shadow ?
                                new jsc.BoxShadow(0, vShadow, thisObj.shadowBlur, 0, thisObj.shadowColor) :
                                null);
                    },


                    getPickerDims: function (thisObj) {
                        var displaySlider = !!jsc.getSliderComponent(thisObj);
                        var dims = [
                            2 * thisObj.insetWidth + 2 * thisObj.padding + thisObj.width +
                                (displaySlider ? 2 * thisObj.insetWidth + jsc.getPadToSliderPadding(thisObj) + thisObj.sliderSize : 0),
                            2 * thisObj.insetWidth + 2 * thisObj.padding + thisObj.height +
                                (thisObj.closable ? 2 * thisObj.insetWidth + thisObj.padding + thisObj.buttonHeight : 0)
                        ];
                        return dims;
                    },


                    getPickerOuterDims: function (thisObj) {
                        var dims = jsc.getPickerDims(thisObj);
                        return [
                            dims[0] + 2 * thisObj.borderWidth,
                            dims[1] + 2 * thisObj.borderWidth
                        ];
                    },


                    getPadToSliderPadding: function (thisObj) {
                        return Math.max(thisObj.padding, 1.5 * (2 * thisObj.pointerBorderWidth + thisObj.pointerThickness));
                    },


                    getPadYComponent: function (thisObj) {
                        switch (thisObj.mode.charAt(1).toLowerCase()) {
                            case 'v': return 'v'; break;
                        }
                        return 's';
                    },


                    getSliderComponent: function (thisObj) {
                        if (thisObj.mode.length > 2) {
                            switch (thisObj.mode.charAt(2).toLowerCase()) {
                                case 's': return 's'; break;
                                case 'v': return 'v'; break;
                            }
                        }
                        return null;
                    },


                    onDocumentMouseDown: function (e) {
                        if (!e) { e = window.event }
                        var target = e.target || e.srcElement;

                        if (target._jscLinkedInstance) {
                            if (target._jscLinkedInstance.showOnClick) {
                                target._jscLinkedInstance.show();
                            }
                        } else if (target._jscControlName) {
                            jsc.onControlPointerStart(e, target, target._jscControlName, 'mouse');
                        } else {
                            // Mouse is outside the picker controls -> hide the color picker!
                            if (jsc.picker && jsc.picker.owner) {
                                //jsc.picker.owner.hide();
                            }
                        }
                    },


                    onDocumentTouchStart: function (e) {
                        if (!e) { e = window.event }
                        var target = e.target || e.srcElement;

                        if (target._jscLinkedInstance) {
                            if (target._jscLinkedInstance.showOnClick) {
                                target._jscLinkedInstance.show();
                            }
                        } else if (target._jscControlName) {
                            jsc.onControlPointerStart(e, target, target._jscControlName, 'touch');
                        } else {
                            if (jsc.picker && jsc.picker.owner) {
                                jsc.picker.owner.hide();
                            }
                        }
                    },


                    onWindowResize: function (e) {
                        //jsc.redrawPosition();
                    },


                    onParentScroll: function (e) {
                        // hide the picker when one of the parent elements is scrolled
                        if (jsc.picker && jsc.picker.owner) {
                            jsc.picker.owner.hide();
                        }
                    },


                    _pointerMoveEvent: {
                        mouse: 'mousemove',
                        touch: 'touchmove'
                    },
                    _pointerEndEvent: {
                        mouse: 'mouseup',
                        touch: 'touchend'
                    },


                    _pointerOrigin: null,
                    _capturedTarget: null,


                    onControlPointerStart: function (e, target, controlName, pointerType) {
                        var thisObj = target._jscInstance;

                        jsc.preventDefault(e);
                        jsc.captureTarget(target);

                        var registerDragEvents = function (doc, offset) {
                            jsc.attachGroupEvent('drag', doc, jsc._pointerMoveEvent[pointerType],
                                jsc.onDocumentPointerMove(e, target, controlName, pointerType, offset));
                            jsc.attachGroupEvent('drag', doc, jsc._pointerEndEvent[pointerType],
                                jsc.onDocumentPointerEnd(e, target, controlName, pointerType));
                        };

                        registerDragEvents(document, [0, 0]);

                        if (window.parent && window.frameElement) {
                            var rect = window.frameElement.getBoundingClientRect();
                            var ofs = [-rect.left, -rect.top];
                            registerDragEvents(window.parent.window.document, ofs);
                        }

                        var abs = jsc.getAbsPointerPos(e);
                        var rel = jsc.getRelPointerPos(e);
                        jsc._pointerOrigin = {
                            x: abs.x - rel.x,
                            y: abs.y - rel.y
                        };

                        switch (controlName) {
                            case 'pad':
                                // if the slider is at the bottom, move it up
                                switch (jsc.getSliderComponent(thisObj)) {
                                    case 's': if (thisObj.hsv[1] === 0) { thisObj.fromHSV(null, 100, null) }; break;
                                    case 'v': if (thisObj.hsv[2] === 0) { thisObj.fromHSV(null, null, 100) }; break;
                                }
                                jsc.setPad(thisObj, e, 0, 0);
                                break;

                            case 'sld':
                                jsc.setSld(thisObj, e, 0);
                                break;
                        }

                        jsc.dispatchFineChange(thisObj);
                    },


                    onDocumentPointerMove: function (e, target, controlName, pointerType, offset) {
                        return function (e) {
                            var thisObj = target._jscInstance;
                            switch (controlName) {
                                case 'pad':
                                    if (!e) { e = window.event }
                                    jsc.setPad(thisObj, e, offset[0], offset[1]);
                                    jsc.dispatchFineChange(thisObj);
                                    break;

                                case 'sld':
                                    if (!e) { e = window.event }
                                    jsc.setSld(thisObj, e, offset[1]);
                                    jsc.dispatchFineChange(thisObj);
                                    break;
                            }
                        }
                    },


                    onDocumentPointerEnd: function (e, target, controlName, pointerType) {
                        return function (e) {
                            var thisObj = target._jscInstance;
                            jsc.detachGroupEvents('drag');
                            jsc.releaseTarget();
                            // Always dispatch changes after detaching outstanding mouse handlers,
                            // in case some user interaction will occur in user's onchange callback
                            // that would intrude with current mouse events
                            jsc.dispatchChange(thisObj);
                        };
                    },


                    dispatchChange: function (thisObj) {
                        if (thisObj.valueElement) {
                            if (jsc.isElementType(thisObj.valueElement, 'input')) {
                                jsc.fireEvent(thisObj.valueElement, 'change');
                            }
                        }
                    },


                    dispatchFineChange: function (thisObj) {
                        if (thisObj.onFineChange) {
                            var callback;
                            if (typeof thisObj.onFineChange === 'string') {
                                callback = new Function(thisObj.onFineChange);
                            } else {
                                callback = thisObj.onFineChange;
                            }
                            callback.call(thisObj);
                        }
                    },


                    setPad: function (thisObj, e, ofsX, ofsY) {
                        var pointerAbs = jsc.getAbsPointerPos(e);
                        var x = ofsX + pointerAbs.x - jsc._pointerOrigin.x - thisObj.padding - thisObj.insetWidth;
                        var y = ofsY + pointerAbs.y - jsc._pointerOrigin.y - thisObj.padding - thisObj.insetWidth;

                        var xVal = x * (360 / (thisObj.width - 1));
                        var yVal = 100 - (y * (100 / (thisObj.height - 1)));

                        switch (jsc.getPadYComponent(thisObj)) {
                            case 's': thisObj.fromHSV(xVal, yVal, null, jsc.leaveSld); break;
                            case 'v': thisObj.fromHSV(xVal, null, yVal, jsc.leaveSld); break;
                        }
                    },


                    setSld: function (thisObj, e, ofsY) {
                        var pointerAbs = jsc.getAbsPointerPos(e);
                        var y = ofsY + pointerAbs.y - jsc._pointerOrigin.y - thisObj.padding - thisObj.insetWidth;

                        var yVal = 100 - (y * (100 / (thisObj.height - 1)));

                        switch (jsc.getSliderComponent(thisObj)) {
                            case 's': thisObj.fromHSV(null, yVal, null, jsc.leavePad); break;
                            case 'v': thisObj.fromHSV(null, null, yVal, jsc.leavePad); break;
                        }
                    },


                    _vmlNS: 'jsc_vml_',
                    _vmlCSS: 'jsc_vml_css_',
                    _vmlReady: false,


                    initVML: function () {
                        if (!jsc._vmlReady) {
                            // init VML namespace
                            var doc = document;
                            if (!doc.namespaces[jsc._vmlNS]) {
                                doc.namespaces.add(jsc._vmlNS, 'urn:schemas-microsoft-com:vml');
                            }
                            if (!doc.styleSheets[jsc._vmlCSS]) {
                                var tags = ['shape', 'shapetype', 'group', 'background', 'path', 'formulas', 'handles', 'fill', 'stroke', 'shadow', 'textbox', 'textpath', 'imagedata', 'line', 'polyline', 'curve', 'rect', 'roundrect', 'oval', 'arc', 'image'];
                                var ss = doc.createStyleSheet();
                                ss.owningElement.id = jsc._vmlCSS;
                                for (var i = 0; i < tags.length; i += 1) {
                                    ss.addRule(jsc._vmlNS + '\\:' + tags[i], 'behavior:url(#default#VML);');
                                }
                            }
                            jsc._vmlReady = true;
                        }
                    },


                    createPalette: function () {

                        var paletteObj = {
                            elm: null,
                            draw: null
                        };

                        if (jsc.isCanvasSupported) {
                            // Canvas implementation for modern browsers

                            var canvas = document.createElement('canvas');
                            var ctx = canvas.getContext('2d');

                            var drawFunc = function (width, height, type) {
                                canvas.width = width;
                                canvas.height = height;

                                ctx.clearRect(0, 0, canvas.width, canvas.height);

                                var hGrad = ctx.createLinearGradient(0, 0, canvas.width, 0);
                                hGrad.addColorStop(0 / 6, '#F00');
                                hGrad.addColorStop(1 / 6, '#FF0');
                                hGrad.addColorStop(2 / 6, '#0F0');
                                hGrad.addColorStop(3 / 6, '#0FF');
                                hGrad.addColorStop(4 / 6, '#00F');
                                hGrad.addColorStop(5 / 6, '#F0F');
                                hGrad.addColorStop(6 / 6, '#F00');

                                ctx.fillStyle = hGrad;
                                ctx.fillRect(0, 0, canvas.width, canvas.height);

                                var vGrad = ctx.createLinearGradient(0, 0, 0, canvas.height);
                                switch (type.toLowerCase()) {
                                    case 's':
                                        vGrad.addColorStop(0, 'rgba(255,255,255,0)');
                                        vGrad.addColorStop(1, 'rgba(255,255,255,1)');
                                        break;
                                    case 'v':
                                        vGrad.addColorStop(0, 'rgba(0,0,0,0)');
                                        vGrad.addColorStop(1, 'rgba(0,0,0,1)');
                                        break;
                                }
                                ctx.fillStyle = vGrad;
                                ctx.fillRect(0, 0, canvas.width, canvas.height);
                            };

                            paletteObj.elm = canvas;
                            paletteObj.draw = drawFunc;

                        } else {
                            // VML fallback for IE 7 and 8

                            jsc.initVML();

                            var vmlContainer = document.createElement('div');
                            vmlContainer.style.position = 'relative';
                            vmlContainer.style.overflow = 'hidden';

                            var hGrad = document.createElement(jsc._vmlNS + ':fill');
                            hGrad.type = 'gradient';
                            hGrad.method = 'linear';
                            hGrad.angle = '90';
                            hGrad.colors = '16.67% #F0F, 33.33% #00F, 50% #0FF, 66.67% #0F0, 83.33% #FF0'

                            var hRect = document.createElement(jsc._vmlNS + ':rect');
                            hRect.style.position = 'absolute';
                            hRect.style.left = -1 + 'px';
                            hRect.style.top = -1 + 'px';
                            hRect.stroked = false;
                            hRect.appendChild(hGrad);
                            vmlContainer.appendChild(hRect);

                            var vGrad = document.createElement(jsc._vmlNS + ':fill');
                            vGrad.type = 'gradient';
                            vGrad.method = 'linear';
                            vGrad.angle = '180';
                            vGrad.opacity = '0';

                            var vRect = document.createElement(jsc._vmlNS + ':rect');
                            vRect.style.position = 'absolute';
                            vRect.style.left = -1 + 'px';
                            vRect.style.top = -1 + 'px';
                            vRect.stroked = false;
                            vRect.appendChild(vGrad);
                            vmlContainer.appendChild(vRect);

                            var drawFunc = function (width, height, type) {
                                vmlContainer.style.width = width + 'px';
                                vmlContainer.style.height = height + 'px';

                                hRect.style.width =
                                vRect.style.width =
                                    (width + 1) + 'px';
                                hRect.style.height =
                                vRect.style.height =
                                    (height + 1) + 'px';

                                // Colors must be specified during every redraw, otherwise IE won't display
                                // a full gradient during a subsequential redraw
                                hGrad.color = '#F00';
                                hGrad.color2 = '#F00';

                                switch (type.toLowerCase()) {
                                    case 's':
                                        vGrad.color = vGrad.color2 = '#FFF';
                                        break;
                                    case 'v':
                                        vGrad.color = vGrad.color2 = '#000';
                                        break;
                                }
                            };

                            paletteObj.elm = vmlContainer;
                            paletteObj.draw = drawFunc;
                        }

                        return paletteObj;
                    },


                    createSliderGradient: function () {

                        var sliderObj = {
                            elm: null,
                            draw: null
                        };

                        if (jsc.isCanvasSupported) {
                            // Canvas implementation for modern browsers

                            var canvas = document.createElement('canvas');
                            var ctx = canvas.getContext('2d');

                            var drawFunc = function (width, height, color1, color2) {
                                canvas.width = width;
                                canvas.height = height;

                                ctx.clearRect(0, 0, canvas.width, canvas.height);

                                var grad = ctx.createLinearGradient(0, 0, 0, canvas.height);
                                grad.addColorStop(0, color1);
                                grad.addColorStop(1, color2);

                                ctx.fillStyle = grad;
                                ctx.fillRect(0, 0, canvas.width, canvas.height);
                            };

                            sliderObj.elm = canvas;
                            sliderObj.draw = drawFunc;

                        } else {
                            // VML fallback for IE 7 and 8

                            jsc.initVML();

                            var vmlContainer = document.createElement('div');
                            vmlContainer.style.position = 'relative';
                            vmlContainer.style.overflow = 'hidden';

                            var grad = document.createElement(jsc._vmlNS + ':fill');
                            grad.type = 'gradient';
                            grad.method = 'linear';
                            grad.angle = '180';

                            var rect = document.createElement(jsc._vmlNS + ':rect');
                            rect.style.position = 'absolute';
                            rect.style.left = -1 + 'px';
                            rect.style.top = -1 + 'px';
                            rect.stroked = false;
                            rect.appendChild(grad);
                            vmlContainer.appendChild(rect);

                            var drawFunc = function (width, height, color1, color2) {
                                vmlContainer.style.width = width + 'px';
                                vmlContainer.style.height = height + 'px';

                                rect.style.width = (width + 1) + 'px';
                                rect.style.height = (height + 1) + 'px';

                                grad.color = color1;
                                grad.color2 = color2;
                            };

                            sliderObj.elm = vmlContainer;
                            sliderObj.draw = drawFunc;
                        }

                        return sliderObj;
                    },


                    leaveValue: 1 << 0,
                    leaveStyle: 1 << 1,
                    leavePad: 1 << 2,
                    leaveSld: 1 << 3,


                    BoxShadow: (function () {
                        var BoxShadow = function (hShadow, vShadow, blur, spread, color, inset) {
                            this.hShadow = hShadow;
                            this.vShadow = vShadow;
                            this.blur = blur;
                            this.spread = spread;
                            this.color = color;
                            this.inset = !!inset;
                        };

                        BoxShadow.prototype.toString = function () {
                            var vals = [
                                Math.round(this.hShadow) + 'px',
                                Math.round(this.vShadow) + 'px',
                                Math.round(this.blur) + 'px',
                                Math.round(this.spread) + 'px',
                                this.color
                            ];
                            if (this.inset) {
                                vals.push('inset');
                            }
                            return vals.join(' ');
                        };

                        return BoxShadow;
                    })(),


                    //
                    // Usage:
                    // var myColor = new jscolor(<targetElement> [, <options>])
                    //

                    jscolor: function (targetElement, options) {

                        // General options
                        //
                        this.value = null; // initial HEX color. To change it later, use methods fromString(), fromHSV() and fromRGB()
                        this.valueElement = targetElement; // element that will be used to display and input the color code
                        this.styleElement = targetElement; // element that will preview the picked color using CSS backgroundColor
                        this.required = true; // whether the associated text <input> can be left empty
                        this.refine = true; // whether to refine the entered color code (e.g. uppercase it and remove whitespace)
                        this.hash = false; // whether to prefix the HEX color code with # symbol
                        this.uppercase = true; // whether to uppercase the color code
                        this.onFineChange = null; // called instantly every time the color changes (value can be either a function or a string with javascript code)
                        this.activeClass = 'jscolor-active'; // class to be set to the target element when a picker window is open on it
                        this.minS = 0; // min allowed saturation (0 - 100)
                        this.maxS = 100; // max allowed saturation (0 - 100)
                        this.minV = 0; // min allowed value (brightness) (0 - 100)
                        this.maxV = 100; // max allowed value (brightness) (0 - 100)

                        // Accessing the picked color
                        //
                        this.hsv = [0, 0, 100]; // read-only  [0-360, 0-100, 0-100]
                        this.rgb = [255, 255, 255]; // read-only  [0-255, 0-255, 0-255]

                        // Color Picker options
                        //
                        this.width = 181; // width of color palette (in px)
                        this.height = 101; // height of color palette (in px)
                        this.showOnClick = true; // whether to display the color picker when user clicks on its target element
                        this.mode = 'HSV'; // HSV | HVS | HS | HV - layout of the color picker controls
                        this.position = 'bottom'; // left | right | top | bottom - position relative to the target element
                        this.smartPosition = true; // automatically change picker position when there is not enough space for it
                        this.sliderSize = 8; // px
                        this.sliderClassName = "slider";
                        this.sliderPointerClassName = "sliderPointer";
                        this.crossSize = 5; // px
                        this.closable = false; // whether to display the Close button
                        this.closeText = 'Close';
                        this.buttonColor = '#000000'; // CSS color
                        this.buttonHeight = 18; // px
                        this.padding = 12; // px
                        this.backgroundColor = '#3E3C3E'; // CSS color
                        this.borderWidth = 0; // px
                        this.borderColor = '#D0D0D1'; // CSS color
                        this.borderRadius = 0; // px
                        this.insetWidth = 1; // px
                        this.insetColor = '#D0D0D1'; // CSS color
                        this.shadow = true; // whether to display shadow
                        this.shadowBlur = 15; // px
                        this.shadowColor = 'rgba(0,0,0,0.2)'; // CSS color
                        this.pointerColor = '#4C4C4C'; // px
                        this.pointerBorderColor = '#FFFFFF'; // px
                        this.pointerBorderWidth = 0; // px
                        this.pointerThickness = 2; // px
                        this.zIndex = 1000;
                        this.container = document.getElementById("customcolorpickercontainer");//null; // where to append the color picker (BODY element by default)


                        for (var opt in options) {
                            if (options.hasOwnProperty(opt)) {
                                this[opt] = options[opt];
                            }
                        }


                        this.hide = function () {
                            if (isPickerOwner()) {
                                detachPicker();
                            }
                        };


                        this.show = function () {
                            drawPicker();
                        };


                        this.redraw = function () {
                            if (isPickerOwner()) {
                                drawPicker();
                            }
                        };


                        this.importColor = function () {
                            if (!this.valueElement) {
                                this.exportColor();
                            } else {
                                if (jsc.isElementType(this.valueElement, 'input')) {
                                    if (!this.refine) {
                                        if (!this.fromString(this.valueElement.value, jsc.leaveValue)) {
                                            if (this.styleElement) {
                                                this.styleElement.style.backgroundImage = this.styleElement._jscOrigStyle.backgroundImage;
                                                this.styleElement.style.backgroundColor = this.styleElement._jscOrigStyle.backgroundColor;
                                                this.styleElement.style.color = this.styleElement._jscOrigStyle.color;
                                            }
                                            this.exportColor(jsc.leaveValue | jsc.leaveStyle);
                                        }
                                    } else if (!this.required && /^\s*$/.test(this.valueElement.value)) {
                                        this.valueElement.value = '';
                                        if (this.styleElement) {
                                            this.styleElement.style.backgroundImage = this.styleElement._jscOrigStyle.backgroundImage;
                                            this.styleElement.style.backgroundColor = this.styleElement._jscOrigStyle.backgroundColor;
                                            this.styleElement.style.color = this.styleElement._jscOrigStyle.color;
                                        }
                                        this.exportColor(jsc.leaveValue | jsc.leaveStyle);

                                    } else if (this.fromString(this.valueElement.value)) {
                                        // managed to import color successfully from the value -> OK, don't do anything
                                    } else {
                                        this.exportColor();
                                    }
                                } else {
                                    // not an input element -> doesn't have any value
                                    this.exportColor();
                                }
                            }
                        };


                        this.exportColor = function (flags) {
                            if (!(flags & jsc.leaveValue) && this.valueElement) {
                                var value = this.toString();
                                if (this.uppercase) { value = value.toUpperCase() }
                                if (this.hash) { value = '#' + value }

                                if (jsc.isElementType(this.valueElement, 'input')) {
                                    this.valueElement.value = value;
                                } else {
                                    this.valueElement.innerHTML = value;
                                }
                            }
                            if (!(flags & jsc.leaveStyle)) {
                                if (this.styleElement) {
                                    this.styleElement.style.backgroundImage = 'none';
                                    this.styleElement.style.backgroundColor = '#' + this.toString();
                                    this.styleElement.style.color = this.isLight() ? '#000' : '#FFF';
                                }
                            }
                            if (!(flags & jsc.leavePad) && isPickerOwner()) {
                                redrawPad();
                            }
                            if (!(flags & jsc.leaveSld) && isPickerOwner()) {
                                redrawSld();
                            }
                        };


                        // h: 0-360
                        // s: 0-100
                        // v: 0-100
                        //
                        this.fromHSV = function (h, s, v, flags) { // null = don't change
                            if (h !== null) {
                                if (isNaN(h)) { return false }
                                h = Math.max(0, Math.min(360, h));
                            }
                            if (s !== null) {
                                if (isNaN(s)) { return false }
                                s = Math.max(0, Math.min(100, this.maxS, s), this.minS);
                            }
                            if (v !== null) {
                                if (isNaN(v)) { return false }
                                v = Math.max(0, Math.min(100, this.maxV, v), this.minV);
                            }

                            this.rgb = HSV_RGB(
                                h === null ? this.hsv[0] : (this.hsv[0] = h),
                                s === null ? this.hsv[1] : (this.hsv[1] = s),
                                v === null ? this.hsv[2] : (this.hsv[2] = v)
                            );

                            this.exportColor(flags);
                        };


                        // r: 0-255
                        // g: 0-255
                        // b: 0-255
                        //
                        this.fromRGB = function (r, g, b, flags) { // null = don't change
                            if (r !== null) {
                                if (isNaN(r)) { return false }
                                r = Math.max(0, Math.min(255, r));
                            }
                            if (g !== null) {
                                if (isNaN(g)) { return false }
                                g = Math.max(0, Math.min(255, g));
                            }
                            if (b !== null) {
                                if (isNaN(b)) { return false }
                                b = Math.max(0, Math.min(255, b));
                            }

                            var hsv = RGB_HSV(
                                r === null ? this.rgb[0] : r,
                                g === null ? this.rgb[1] : g,
                                b === null ? this.rgb[2] : b
                            );
                            if (hsv[0] !== null) {
                                this.hsv[0] = Math.max(0, Math.min(360, hsv[0]));
                            }
                            if (hsv[2] !== 0) {
                                this.hsv[1] = hsv[1] === null ? null : Math.max(0, this.minS, Math.min(100, this.maxS, hsv[1]));
                            }
                            this.hsv[2] = hsv[2] === null ? null : Math.max(0, this.minV, Math.min(100, this.maxV, hsv[2]));

                            // update RGB according to final HSV, as some values might be trimmed
                            var rgb = HSV_RGB(this.hsv[0], this.hsv[1], this.hsv[2]);
                            this.rgb[0] = rgb[0];
                            this.rgb[1] = rgb[1];
                            this.rgb[2] = rgb[2];

                            this.exportColor(flags);
                        };


                        this.fromString = function (str, flags) {
                            var m;
                            if (m = str.match(/^\W*([0-9A-F]{3}([0-9A-F]{3})?)\W*$/i)) {
                                // HEX notation
                                //

                                if (m[1].length === 6) {
                                    // 6-char notation
                                    this.fromRGB(
                                        parseInt(m[1].substr(0, 2), 16),
                                        parseInt(m[1].substr(2, 2), 16),
                                        parseInt(m[1].substr(4, 2), 16),
                                        flags
                                    );
                                } else {
                                    // 3-char notation
                                    this.fromRGB(
                                        parseInt(m[1].charAt(0) + m[1].charAt(0), 16),
                                        parseInt(m[1].charAt(1) + m[1].charAt(1), 16),
                                        parseInt(m[1].charAt(2) + m[1].charAt(2), 16),
                                        flags
                                    );
                                }
                                return true;

                            } else if (m = str.match(/^\W*rgba?\(([^)]*)\)\W*$/i)) {
                                var params = m[1].split(',');
                                var re = /^\s*(\d*)(\.\d+)?\s*$/;
                                var mR, mG, mB;
                                if (
                                    params.length >= 3 &&
                                    (mR = params[0].match(re)) &&
                                    (mG = params[1].match(re)) &&
                                    (mB = params[2].match(re))
                                ) {
                                    var r = parseFloat((mR[1] || '0') + (mR[2] || ''));
                                    var g = parseFloat((mG[1] || '0') + (mG[2] || ''));
                                    var b = parseFloat((mB[1] || '0') + (mB[2] || ''));
                                    this.fromRGB(r, g, b, flags);
                                    return true;
                                }
                            }
                            return false;
                        };


                        this.toString = function () {
                            return (
                                (0x100 | Math.round(this.rgb[0])).toString(16).substr(1) +
                                (0x100 | Math.round(this.rgb[1])).toString(16).substr(1) +
                                (0x100 | Math.round(this.rgb[2])).toString(16).substr(1)
                            );
                        };


                        this.toHEXString = function () {
                            return '#' + this.toString().toUpperCase();
                        };


                        this.toRGBString = function () {
                            return ('rgb(' +
                                Math.round(this.rgb[0]) + ',' +
                                Math.round(this.rgb[1]) + ',' +
                                Math.round(this.rgb[2]) + ')'
                            );
                        };


                        this.isLight = function () {
                            return (
                                0.213 * this.rgb[0] +
                                0.715 * this.rgb[1] +
                                0.072 * this.rgb[2] >
                                255 / 2
                            );
                        };


                        this._processParentElementsInDOM = function () {
                            if (this._linkedElementsProcessed) { return }
                            this._linkedElementsProcessed = true;

                            var elm = this.targetElement;
                            do {
                                // If the target element or one of its parent nodes has fixed position,
                                // then use fixed positioning instead
                                //
                                // Note: In Firefox, getComputedStyle returns null in a hidden iframe,
                                // that's why we need to check if the returned style object is non-empty
                                var currStyle = jsc.getStyle(elm);
                                if (currStyle && currStyle.position.toLowerCase() === 'fixed') {
                                    this.fixed = true;
                                }

                                if (elm !== this.targetElement) {
                                    // Ensure to attach onParentScroll only once to each parent element
                                    // (multiple targetElements can share the same parent nodes)
                                    //
                                    // Note: It's not just offsetParents that can be scrollable,
                                    // that's why we loop through all parent nodes
                                    if (!elm._jscEventsAttached) {
                                        jsc.attachEvent(elm, 'scroll', jsc.onParentScroll);
                                        elm._jscEventsAttached = true;
                                    }
                                }
                            } while ((elm = elm.parentNode) && !jsc.isElementType(elm, 'body'));
                        };


                        // r: 0-255
                        // g: 0-255
                        // b: 0-255
                        //
                        // returns: [ 0-360, 0-100, 0-100 ]
                        //
                        function RGB_HSV(r, g, b) {
                            r /= 255;
                            g /= 255;
                            b /= 255;
                            var n = Math.min(Math.min(r, g), b);
                            var v = Math.max(Math.max(r, g), b);
                            var m = v - n;
                            if (m === 0) { return [null, 0, 100 * v] }
                            var h = r === n ? 3 + (b - g) / m : (g === n ? 5 + (r - b) / m : 1 + (g - r) / m);
                            return [
                                60 * (h === 6 ? 0 : h),
                                100 * (m / v),
                                100 * v
                            ];
                        }


                        // h: 0-360
                        // s: 0-100
                        // v: 0-100
                        //
                        // returns: [ 0-255, 0-255, 0-255 ]
                        //
                        function HSV_RGB(h, s, v) {
                            var u = 255 * (v / 100);

                            if (h === null) {
                                return [u, u, u];
                            }

                            h /= 60;
                            s /= 100;

                            var i = Math.floor(h);
                            var f = i % 2 ? h - i : 1 - (h - i);
                            var m = u * (1 - s);
                            var n = u * (1 - s * f);
                            switch (i) {
                                case 6:
                                case 0: return [u, n, m];
                                case 1: return [n, u, m];
                                case 2: return [m, u, n];
                                case 3: return [m, n, u];
                                case 4: return [n, m, u];
                                case 5: return [u, m, n];
                            }
                        }


                        function detachPicker() {
                            jsc.unsetClass(THIS.targetElement, THIS.activeClass);
                            jsc.picker.wrap.parentNode.removeChild(jsc.picker.wrap);
                            delete jsc.picker.owner;
                        }


                        function drawPicker() {

                            // At this point, when drawing the picker, we know what the parent elements are
                            // and we can do all related DOM operations, such as registering events on them
                            // or checking their positioning
                            THIS._processParentElementsInDOM();

                            if (!jsc.picker) {
                                jsc.picker = {
                                    owner: null,
                                    wrap: document.createElement('div'),
                                    box: document.createElement('div'),
                                    boxS: document.createElement('div'), // shadow area
                                    boxB: document.createElement('div'), // border
                                    pad: document.createElement('div'),
                                    padB: document.createElement('div'), // border
                                    padM: document.createElement('div'), // mouse/touch area
                                    padPal: jsc.createPalette(),
                                    cross: document.createElement('div'),
                                    crossBY: document.createElement('div'), // border Y
                                    crossBX: document.createElement('div'), // border X
                                    crossLY: document.createElement('div'), // line Y
                                    crossLX: document.createElement('div'), // line X
                                    sld: document.createElement('div'),
                                    sldB: document.createElement('div'), // border
                                    sldM: document.createElement('div'), // mouse/touch area
                                    sldGrad: jsc.createSliderGradient(),
                                    sldPtrS: document.createElement('div'), // slider pointer spacer
                                    sldPtrIB: document.createElement('div'), // slider pointer inner border
                                    sldPtrMB: document.createElement('div'), // slider pointer middle border
                                    sldPtrOB: document.createElement('div'), // slider pointer outer border
                                    btn: document.createElement('div'),
                                    btnT: document.createElement('span') // text
                                };

                                jsc.picker.pad.appendChild(jsc.picker.padPal.elm);
                                jsc.picker.padB.appendChild(jsc.picker.pad);
                                jsc.picker.cross.appendChild(jsc.picker.crossBY);
                                jsc.picker.cross.appendChild(jsc.picker.crossBX);
                                jsc.picker.cross.appendChild(jsc.picker.crossLY);
                                jsc.picker.cross.appendChild(jsc.picker.crossLX);
                                jsc.picker.padB.appendChild(jsc.picker.cross);
                                jsc.picker.box.appendChild(jsc.picker.padB);
                                jsc.picker.box.appendChild(jsc.picker.padM);

                                jsc.picker.sld.appendChild(jsc.picker.sldGrad.elm);
                                jsc.picker.sldB.appendChild(jsc.picker.sld);
                                jsc.picker.sldB.appendChild(jsc.picker.sldPtrOB);
                                jsc.picker.sldPtrOB.appendChild(jsc.picker.sldPtrMB);
                                jsc.picker.sldPtrMB.appendChild(jsc.picker.sldPtrIB);
                                jsc.picker.sldPtrIB.appendChild(jsc.picker.sldPtrS);
                                jsc.picker.box.appendChild(jsc.picker.sldB);
                                jsc.picker.box.appendChild(jsc.picker.sldM);

                                jsc.picker.btn.appendChild(jsc.picker.btnT);
                                jsc.picker.box.appendChild(jsc.picker.btn);

                                jsc.picker.boxB.appendChild(jsc.picker.box);
                                jsc.picker.wrap.appendChild(jsc.picker.boxS);
                                jsc.picker.wrap.appendChild(jsc.picker.boxB);
                            }

                            var p = jsc.picker;

                            var displaySlider = !!jsc.getSliderComponent(THIS);
                            var dims = jsc.getPickerDims(THIS);
                            var crossOuterSize = (2 * THIS.pointerBorderWidth + THIS.pointerThickness + 2 * THIS.crossSize);
                            var padToSliderPadding = jsc.getPadToSliderPadding(THIS);
                            var borderRadius = Math.min(
                                THIS.borderRadius,
                                Math.round(THIS.padding * Math.PI)); // px
                            var padCursor = 'crosshair';

                            // wrap
                            p.wrap.style.clear = 'both';
                            p.wrap.style.width = (dims[0] + 2 * THIS.borderWidth) + 'px';
                            p.wrap.style.height = (dims[1] + 2 * THIS.borderWidth) + 'px';
                            p.wrap.style.zIndex = THIS.zIndex;

                            // picker
                            p.box.style.width = dims[0] + 'px';
                            p.box.style.height = dims[1] + 'px';

                            p.boxS.style.position = 'absolute';
                            p.boxS.style.left = '0';
                            p.boxS.style.top = '0';
                            p.boxS.style.width = '100%';
                            p.boxS.style.height = '100%';
                            jsc.setBorderRadius(p.boxS, borderRadius + 'px');

                            // picker border
                            p.boxB.style.position = 'relative';
                            p.boxB.style.border = THIS.borderWidth + 'px solid';
                            p.boxB.style.borderColor = THIS.borderColor;
                            p.boxB.style.background = THIS.backgroundColor;
                            jsc.setBorderRadius(p.boxB, borderRadius + 'px');

                            // IE hack:
                            // If the element is transparent, IE will trigger the event on the elements under it,
                            // e.g. on Canvas or on elements with border
                            p.padM.style.background =
                            p.sldM.style.background =
                                '#FFF';
                            jsc.setStyle(p.padM, 'opacity', '0');
                            jsc.setStyle(p.sldM, 'opacity', '0');

                            // pad
                            p.pad.style.position = 'relative';
                            p.pad.style.width = THIS.width + 'px';
                            p.pad.style.height = THIS.height + 'px';

                            // pad palettes (HSV and HVS)
                            p.padPal.draw(THIS.width, THIS.height, jsc.getPadYComponent(THIS));

                            // pad border
                            p.padB.style.position = 'absolute';
                            p.padB.style.left = THIS.padding + 'px';
                            p.padB.style.top = THIS.padding + 'px';
                            p.padB.style.border = THIS.insetWidth + 'px solid';
                            p.padB.style.borderColor = THIS.insetColor;

                            // pad mouse area
                            p.padM._jscInstance = THIS;
                            p.padM._jscControlName = 'pad';
                            p.padM.style.position = 'absolute';
                            p.padM.style.left = '0';
                            p.padM.style.top = '0';
                            p.padM.style.width = (THIS.padding + 2 * THIS.insetWidth + THIS.width + padToSliderPadding / 2) + 'px';
                            p.padM.style.height = dims[1] + 'px';
                            p.padM.style.cursor = padCursor;

                            // pad cross
                            p.cross.style.position = 'absolute';
                            p.cross.style.left =
                            p.cross.style.top =
                                '0';
                            p.cross.style.width =
                            p.cross.style.height =
                                crossOuterSize + 'px';

                            // pad cross border Y and X
                            p.crossBY.style.position =
                            p.crossBX.style.position =
                                'absolute';
                            p.crossBY.style.background =
                            p.crossBX.style.background =
                                THIS.pointerBorderColor;
                            p.crossBY.style.width =
                            p.crossBX.style.height =
                                (2 * THIS.pointerBorderWidth + THIS.pointerThickness) + 'px';
                            p.crossBY.style.height =
                            p.crossBX.style.width =
                                crossOuterSize + 'px';
                            p.crossBY.style.left =
                            p.crossBX.style.top =
                                (Math.floor(crossOuterSize / 2) - Math.floor(THIS.pointerThickness / 2) - THIS.pointerBorderWidth) + 'px';
                            p.crossBY.style.top =
                            p.crossBX.style.left =
                                '0';

                            // pad cross line Y and X
                            p.crossLY.style.position =
                            p.crossLX.style.position =
                                'absolute';
                            p.crossLY.style.background =
                            p.crossLX.style.background =
                                THIS.pointerColor;
                            p.crossLY.style.height =
                            p.crossLX.style.width =
                                (crossOuterSize - 2 * THIS.pointerBorderWidth) + 'px';
                            p.crossLY.style.width =
                            p.crossLX.style.height =
                                THIS.pointerThickness + 'px';
                            p.crossLY.style.left =
                            p.crossLX.style.top =
                                (Math.floor(crossOuterSize / 2) - Math.floor(THIS.pointerThickness / 2)) + 'px';
                            p.crossLY.style.top =
                            p.crossLX.style.left =
                                THIS.pointerBorderWidth + 'px';

                            // slider
                            p.sld.style.overflow = 'hidden';
                            p.sld.style.width = THIS.sliderSize + 'px';
                            //Adding custom class to slider
                            p.sld.className = THIS.sliderClassName;
                            p.sld.style.height = THIS.height + 'px';

                            // slider gradient
                            p.sldGrad.draw(THIS.sliderSize, THIS.height, '#000', '#000');

                            // slider border
                            p.sldB.style.display = displaySlider ? 'block' : 'none';
                            p.sldB.style.position = 'absolute';
                            p.sldB.style.right = THIS.padding + 'px';
                            p.sldB.style.top = THIS.padding + 'px';
                            p.sldB.style.border = THIS.insetWidth + 'px solid';
                            p.sldB.style.borderColor = THIS.insetColor;

                            // slider mouse area
                            p.sldM._jscInstance = THIS;
                            p.sldM._jscControlName = 'sld';
                            p.sldM.style.display = displaySlider ? 'block' : 'none';
                            p.sldM.style.position = 'absolute';
                            p.sldM.style.right = '0';
                            p.sldM.style.top = '0';
                            p.sldM.style.width = (THIS.sliderSize + padToSliderPadding / 2 + THIS.padding + 2 * THIS.insetWidth) + 'px';
                            p.sldM.style.height = dims[1] + 'px';
                            p.sldM.style.cursor = 'default';

                            // slider pointer inner and outer border
                            p.sldPtrIB.style.border =
                            p.sldPtrOB.style.border =
                                THIS.pointerBorderWidth + 'px solid ' + THIS.pointerBorderColor;

                            // Assign Class to SliderPointer
                            p.sldPtrOB.className = THIS.sliderPointerClassName;
                            // slider pointer outer border
                            p.sldPtrOB.style.position = 'absolute';
                            p.sldPtrOB.style.left = -(2 * THIS.pointerBorderWidth + THIS.pointerThickness) + 'px';
                            p.sldPtrOB.style.top = '0';

                            // slider pointer middle border
                            p.sldPtrMB.style.border = THIS.pointerThickness + 'px solid ' + THIS.pointerColor;

                            // slider pointer spacer
                            p.sldPtrS.style.width = THIS.sliderSize + 'px';
                            p.sldPtrS.style.height = sliderPtrSpace + 'px';

                            // the Close button
                            function setBtnBorder() {
                                var insetColors = THIS.insetColor.split(/\s+/);
                                var outsetColor = insetColors.length < 2 ? insetColors[0] : insetColors[1] + ' ' + insetColors[0] + ' ' + insetColors[0] + ' ' + insetColors[1];
                                p.btn.style.borderColor = outsetColor;
                            }
                            p.btn.style.display = THIS.closable ? 'block' : 'none';
                            p.btn.style.position = 'absolute';
                            p.btn.style.left = THIS.padding + 'px';
                            p.btn.style.bottom = THIS.padding + 'px';
                            p.btn.style.padding = '0 15px';
                            p.btn.style.height = THIS.buttonHeight + 'px';
                            p.btn.style.border = THIS.insetWidth + 'px solid';
                            setBtnBorder();
                            p.btn.style.color = THIS.buttonColor;
                            p.btn.style.font = '12px sans-serif';
                            p.btn.style.textAlign = 'center';
                            try {
                                p.btn.style.cursor = 'pointer';
                            } catch (eOldIE) {
                                p.btn.style.cursor = 'hand';
                            }
                            p.btn.onmousedown = function () {
                                THIS.hide();
                            };
                            p.btnT.style.lineHeight = THIS.buttonHeight + 'px';
                            p.btnT.innerHTML = '';
                            p.btnT.appendChild(document.createTextNode(THIS.closeText));

                            // place pointers
                            redrawPad();
                            redrawSld();

                            // If we are changing the owner without first closing the picker,
                            // make sure to first deal with the old owner
                            if (jsc.picker.owner && jsc.picker.owner !== THIS) {
                                jsc.unsetClass(jsc.picker.owner.targetElement, THIS.activeClass);
                            }

                            // Set the new picker owner
                            jsc.picker.owner = THIS;

                            // The redrawPosition() method needs picker.owner to be set, that's why we call it here,
                            // after setting the owner
                            if (jsc.isElementType(container, 'body')) {
                                jsc.redrawPosition();
                            } else {
                                jsc._drawPosition(THIS, 0, 0, 'relative', false);
                            }

                            if (p.wrap.parentNode != container) {
                                container.appendChild(p.wrap);
                            }

                            jsc.setClass(THIS.targetElement, THIS.activeClass);
                        }


                        function redrawPad() {
                            // redraw the pad pointer
                            switch (jsc.getPadYComponent(THIS)) {
                                case 's': var yComponent = 1; break;
                                case 'v': var yComponent = 2; break;
                            }
                            var x = Math.round((THIS.hsv[0] / 360) * (THIS.width - 1));
                            var y = Math.round((1 - THIS.hsv[yComponent] / 100) * (THIS.height - 1));
                            var crossOuterSize = (2 * THIS.pointerBorderWidth + THIS.pointerThickness + 2 * THIS.crossSize);
                            var ofs = -Math.floor(crossOuterSize / 2);
                            jsc.picker.cross.style.left = (x + ofs) + 'px';
                            jsc.picker.cross.style.top = (y + ofs) + 'px';

                            // redraw the slider
                            switch (jsc.getSliderComponent(THIS)) {
                                case 's':
                                    var rgb1 = HSV_RGB(THIS.hsv[0], 100, THIS.hsv[2]);
                                    var rgb2 = HSV_RGB(THIS.hsv[0], 0, THIS.hsv[2]);
                                    var color1 = 'rgb(' +
                                        Math.round(rgb1[0]) + ',' +
                                        Math.round(rgb1[1]) + ',' +
                                        Math.round(rgb1[2]) + ')';
                                    var color2 = 'rgb(' +
                                        Math.round(rgb2[0]) + ',' +
                                        Math.round(rgb2[1]) + ',' +
                                        Math.round(rgb2[2]) + ')';
                                    jsc.picker.sldGrad.draw(THIS.sliderSize, THIS.height, color1, color2);
                                    break;
                                case 'v':
                                    var rgb = HSV_RGB(THIS.hsv[0], THIS.hsv[1], 100);
                                    var color1 = 'rgb(' +
                                        Math.round(rgb[0]) + ',' +
                                        Math.round(rgb[1]) + ',' +
                                        Math.round(rgb[2]) + ')';
                                    var color2 = '#000';
                                    jsc.picker.sldGrad.draw(THIS.sliderSize, THIS.height, color1, color2);
                                    break;
                            }
                        }


                        function redrawSld() {
                            var sldComponent = jsc.getSliderComponent(THIS);
                            if (sldComponent) {
                                // redraw the slider pointer
                                switch (sldComponent) {
                                    case 's': var yComponent = 1; break;
                                    case 'v': var yComponent = 2; break;
                                }
                                var y = Math.round((1 - THIS.hsv[yComponent] / 100) * (THIS.height - 1));
                                jsc.picker.sldPtrOB.style.top = (y - (2 * THIS.pointerBorderWidth + THIS.pointerThickness) - Math.floor(sliderPtrSpace / 2)) + 'px';
                            }
                        }


                        function isPickerOwner() {
                            return jsc.picker && jsc.picker.owner === THIS;
                        }


                        function blurValue() {
                            THIS.importColor();
                        }
                        // Find the target element
                        if (typeof targetElement === 'string') {
                            var id = targetElement;
                            var elm = document.getElementById(id);
                            if (elm) {
                                this.targetElement = elm;
                            } else {
                                jsc.warn('Could not find target element with ID \'' + id + '\'');
                            }
                        } else if (targetElement) {
                            this.targetElement = targetElement;
                        } else {
                            jsc.warn('Invalid target element: \'' + targetElement + '\'');
                        }

                        if (this.targetElement._jscLinkedInstance) {
                            jsc.warn('Cannot link jscolor twice to the same element. Skipping.');
                            return;
                        }
                        this.targetElement._jscLinkedInstance = this;

                        // Find the value element
                        this.valueElement = jsc.fetchElement(this.valueElement);
                        // Find the style element
                        this.styleElement = jsc.fetchElement(this.styleElement);

                        var THIS = this;
                        var container =
                            this.container ?
                            jsc.fetchElement(this.container) :
                            document.getElementsByTagName('body')[0];
                        var sliderPtrSpace = 3; // px

                        // For BUTTON elements it's important to stop them from sending the form when clicked
                        // (e.g. in Safari)
                        if (jsc.isElementType(this.targetElement, 'button')) {
                            if (this.targetElement.onclick) {
                                var origCallback = this.targetElement.onclick;
                                this.targetElement.onclick = function (evt) {
                                    origCallback.call(this, evt);
                                    return false;
                                };
                            } else {
                                this.targetElement.onclick = function () { return false };
                            }
                        }

                        /*
                        var elm = this.targetElement;
                        do {
                            // If the target element or one of its offsetParents has fixed position,
                            // then use fixed positioning instead
                            //
                            // Note: In Firefox, getComputedStyle returns null in a hidden iframe,
                            // that's why we need to check if the returned style object is non-empty
                            var currStyle = jsc.getStyle(elm);
                            if (currStyle && currStyle.position.toLowerCase() === 'fixed') {
                                this.fixed = true;
                            }

                            if (elm !== this.targetElement) {
                                // attach onParentScroll so that we can recompute the picker position
                                // when one of the offsetParents is scrolled
                                if (!elm._jscEventsAttached) {
                                    jsc.attachEvent(elm, 'scroll', jsc.onParentScroll);
                                    elm._jscEventsAttached = true;
                                }
                            }
                        } while ((elm = elm.offsetParent) && !jsc.isElementType(elm, 'body'));
                        */

                        // valueElement
                        if (this.valueElement) {
                            if (jsc.isElementType(this.valueElement, 'input')) {
                                var updateField = function () {
                                    THIS.fromString(THIS.valueElement.value, jsc.leaveValue);
                                    jsc.dispatchFineChange(THIS);
                                };
                                jsc.attachEvent(this.valueElement, 'keyup', updateField);
                                jsc.attachEvent(this.valueElement, 'input', updateField);
                                jsc.attachEvent(this.valueElement, 'blur', blurValue);
                                this.valueElement.setAttribute('autocomplete', 'off');
                            }
                        }

                        // styleElement
                        if (this.styleElement) {
                            this.styleElement._jscOrigStyle = {
                                backgroundImage: this.styleElement.style.backgroundImage,
                                backgroundColor: this.styleElement.style.backgroundColor,
                                color: this.styleElement.style.color
                            };
                        }

                        if (this.value) {
                            // Try to set the color from the .value option and if unsuccessful,
                            // export the current color
                            this.fromString(this.value) || this.exportColor();
                        } else {
                            this.importColor();
                        }
                    }
                };

                //================================
                // Public properties and methods
                //================================


                // By default, search for all elements with class="jscolor" and install a color picker on them.
                //
                // You can change what class name will be looked for by setting the property jscolor.lookupClass
                // anywhere in your HTML document. To completely disable the automatic lookup, set it to null.
                //
                jsc.jscolor.lookupClass = 'jscolor';


                jsc.jscolor.installByClassName = function (className) {
                    var inputElms = document.getElementsByTagName('input');
                    var buttonElms = document.getElementsByTagName('button');

                    jsc.tryInstallOnElements(inputElms, className);
                    jsc.tryInstallOnElements(buttonElms, className);
                };
                jsc.register();
                return jsc.jscolor;
            })();
        }
    </script>*@
</body>


@*@Scripts.Render("~/Scripts/Slider/jquery-ui-1.10.3.custom.min.js")
    @Scripts.Render("~/Scripts/Slider/jquery.cookie.js")
    @Scripts.Render("~/Scripts/Slider/waypoints.min.js")
    @Scripts.Render("~/Scripts/Slider/plugins.js")
    @Scripts.Render("~/Scripts/Slider/prettify.js")
    @Scripts.Render("~/Scripts/Slider/jquery-ui-slider-pips.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
    @Scripts.Render("~/Scripts/Slider/init.js")
    @Scripts.Render("~/Scripts/jquery.nicescroll.js?" + @iSHOPNew.DAL.GlobalVariables.GetRandomNumber + "")
    @Scripts.Render("~/Scripts/lodash.min.js")

    @Scripts.Render("~/Scripts/d3.v3.min.js")*@
@*Scripts.Render("https://d3js.org/d3.v3.min.js")
    @Scripts.Render("https://d3js.org/d3.v4.min.js")
       @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.js")*@

@System.Web.Optimization.Scripts.Render("~/bundle/scripts/bottom-layout")
</html>
